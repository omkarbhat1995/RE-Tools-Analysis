; ---------------------------------------------------------------------------

Elf64_Sym       struc ; (sizeof=0x18, align=0x8, mappedto_1)
                                        ; XREF: LOAD:00000000000002B8/r
                                        ; LOAD:00000000000002D0/r ...
st_name         dd ?                    ; offset (000003C0)
st_info         db ?
st_other        db ?
st_shndx        dw ?
st_value        dq ?                    ; offset (00000000)
st_size         dq ?
Elf64_Sym       ends

; ---------------------------------------------------------------------------

Elf64_Rela      struc ; (sizeof=0x18, align=0x8, copyof_2)
                                        ; XREF: LOAD:0000000000000528/r
                                        ; LOAD:0000000000000540/r ...
r_offset        dq ?
r_info          dq ?
r_addend        dq ?
Elf64_Rela      ends

; ---------------------------------------------------------------------------

Elf64_Dyn       struc ; (sizeof=0x10, align=0x8, copyof_3)
                                        ; XREF: LOAD:_DYNAMIC/r
                                        ; LOAD:0000000000200DA8/r ...
d_tag           dq ?
d_un            dq ?
Elf64_Dyn       ends

; ---------------------------------------------------------------------------

Elf64_Verneed   struc ; (sizeof=0x10, align=0x4, mappedto_4)
                                        ; XREF: LOAD:00000000000004E8/r
                                        ; LOAD:0000000000000508/r
vn_version      dw ?
vn_cnt          dw ?
vn_file         dd ?                    ; offset (000003C0)
vn_aux          dd ?
vn_next         dd ?
Elf64_Verneed   ends

; ---------------------------------------------------------------------------

Elf64_Vernaux   struc ; (sizeof=0x10, align=0x4, mappedto_5)
                                        ; XREF: LOAD:00000000000004F8/r
                                        ; LOAD:0000000000000518/r
vna_hash        dd ?
vna_flags       dw ?
vna_other       dw ?
vna_name        dd ?                    ; offset (000003C0)
vna_next        dd ?
Elf64_Vernaux   ends


;
; +-------------------------------------------------------------------------+
; |   This file has been generated by The Interactive Disassembler (IDA)    |
; |           Copyright (c) 2018 Hex-Rays, <support@hex-rays.com>           |
; |                      License info: 48-B51B-7454-28                      |
; |            University of Virginia / Dpt of Computer Science             |
; +-------------------------------------------------------------------------+
;
; Input SHA256 : 0A71E5F6BF337ECA712FDA459D2914A7E5A452491FB5E3EA33F645BE805BC83D
; Input MD5    : 4C77B11D2AC41D34C384D73064FE6A00
; Input CRC32  : CFE0045E

; File Name   : /u/zy8ez/zoya/Binaries/fortran-hello
; Format      : ELF64 for x86-64 (Shared object)
; Interpreter '/lib64/ld-linux-x86-64.so.2'
; Needed Library 'libgfortran.so.4'
; Needed Library 'libc.so.6'
;
; Source File : 'crtstuff.c'
; Source File : 'hello.f'
; Source File : 'crtstuff.c'

                .686p
                .mmx
                .model flat
.intel_syntax noprefix

; ===========================================================================

; Segment type: Pure code
; Segment permissions: Read/Execute
LOAD            segment byte public 'CODE' use64
                assume cs:LOAD
                assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
dword_0         dd 464C457Fh            ; DATA XREF: LOAD:00000000000002D0↓o
                                        ; LOAD:00000000000002E8↓o ...
                                        ; File format: \x7FELF
                db 2                    ; File class: 64-bit
                db 1                    ; Data encoding: little-endian
                db 1                    ; File version
                db 0                    ; OS/ABI: UNIX System V ABI
                db 0                    ; ABI Version
                db 7 dup(0)             ; Padding
                dw 3                    ; File type: Shared object
                dw 3Eh                  ; Machine: x86-64
                dd 1                    ; File version
                dq offset _start        ; Entry point
                dq 40h                  ; PHT file offset
                dq 1A70h                ; SHT file offset
                dd 0                    ; Processor-specific flags
                dw 40h                  ; ELF header size
                dw 38h                  ; PHT entry size
                dw 9                    ; Number of entries in PHT
                dw 40h                  ; SHT entry size
                dw 1Dh                  ; Number of entries in SHT
                dw 1Ch                  ; SHT entry index for string table
; ELF64 Program Header
; PHT Entry 0
dword_40        dd 6                    ; DATA XREF: LOAD:0000000000000050↓o
                                        ; Type: PHDR
                dd 4                    ; Flags
                dq 40h                  ; File offset
                dq offset dword_40      ; Virtual address
                dq 40h                  ; Physical address
                dq 1F8h                 ; Size in file image
                dq 1F8h                 ; Size in memory image
                dq 8                    ; Alignment
; PHT Entry 1
                dd 3                    ; Type: INTERP
                dd 4                    ; Flags
                dq 238h                 ; File offset
                dq offset aLib64LdLinuxX8 ; Virtual address
                dq 238h                 ; Physical address
                dq 1Ch                  ; Size in file image
                dq 1Ch                  ; Size in memory image
                dq 1                    ; Alignment
; PHT Entry 2
                dd 1                    ; Type: LOAD
                dd 5                    ; Flags
                dq 0                    ; File offset
                dq 0                    ; Virtual address
                dq 0                    ; Physical address
                dq 0AE8h                ; Size in file image
                dq 0AE8h                ; Size in memory image
                dq 200000h              ; Alignment
; PHT Entry 3
                dd 1                    ; Type: LOAD
                dd 6                    ; Flags
                dq 0D88h                ; File offset
                dq offset __frame_dummy_init_array_entry ; Virtual address
                dq 200D88h              ; Physical address
                dq 288h                 ; Size in file image
                dq 290h                 ; Size in memory image
                dq 200000h              ; Alignment
; PHT Entry 4
                dd 2                    ; Type: DYNAMIC
                dd 6                    ; Flags
                dq 0D98h                ; File offset
                dq offset _DYNAMIC      ; Virtual address
                dq 200D98h              ; Physical address
                dq 200h                 ; Size in file image
                dq 200h                 ; Size in memory image
                dq 8                    ; Alignment
; PHT Entry 5
                dd 4                    ; Type: NOTE
                dd 4                    ; Flags
                dq 254h                 ; File offset
                dq offset dword_254     ; Virtual address
                dq 254h                 ; Physical address
                dq 44h                  ; Size in file image
                dq 44h                  ; Size in memory image
                dq 4                    ; Alignment
; PHT Entry 6
                dd 6474E550h            ; Type: EH_FRAME
                dd 4                    ; Flags
                dq 97Ch                 ; File offset
                dq offset __GNU_EH_FRAME_HDR ; Virtual address
                dq 97Ch                 ; Physical address
                dq 44h                  ; Size in file image
                dq 44h                  ; Size in memory image
                dq 4                    ; Alignment
; PHT Entry 7
                dd 6474E551h            ; Type: STACK
                dd 6                    ; Flags
                dq 0                    ; File offset
                dq 0                    ; Virtual address
                dq 0                    ; Physical address
                dq 0                    ; Size in file image
                dq 0                    ; Size in memory image
                dq 10h                  ; Alignment
; PHT Entry 8
                dd 6474E552h            ; Type: RO-AFTER
                dd 4                    ; Flags
                dq 0D88h                ; File offset
                dq offset __frame_dummy_init_array_entry ; Virtual address
                dq 200D88h              ; Physical address
                dq 278h                 ; Size in file image
                dq 278h                 ; Size in memory image
                dq 1                    ; Alignment
aLib64LdLinuxX8 db '/lib64/ld-linux-x86-64.so.2',0
                                        ; DATA XREF: LOAD:0000000000000088↑o
dword_254       dd 4                    ; DATA XREF: LOAD:0000000000000168↑o
                dq 100000010h, 554E47h, 200000003h, 400000000h, 300000014h
                dq 0F2FF1A4E00554E47h, 0FC65EAC8C24394C9h, 0FCF1FB88DD879AAh
; ELF GNU Hash Table
elf_gnu_hash_nbuckets dd 1
elf_gnu_hash_symbias dd 1
elf_gnu_hash_bitmask_nwords dd 1
elf_gnu_hash_shift dd 0
elf_gnu_hash_indexes dq 0
elf_gnu_hash_bucket dd 0
elf_gnu_hash_chain dd 0
; ELF Symbol Table
                Elf64_Sym <0>
                Elf64_Sym <offset aGfortranSetArg - offset byte_3C0, 12h, 0, 0, \ ; "_gfortran_set_args"
                           offset dword_0, 0>
                Elf64_Sym <offset aGmonStart - offset byte_3C0, 20h, 0, 0, \ ; "__gmon_start__"
                           offset dword_0, 0>
                Elf64_Sym <offset aGfortranStWrit_0 - offset byte_3C0, 12h, 0, 0, \ ; "_gfortran_st_write"
                           offset dword_0, 0>
                Elf64_Sym <offset aLibcStartMain - offset byte_3C0, 12h, 0, 0, \ ; "__libc_start_main"
                           offset dword_0, 0>
                Elf64_Sym <offset aItmDeregistert - offset byte_3C0, 20h, 0, 0, \ ; "_ITM_deregisterTMCloneTable"
                           offset dword_0, 0>
                Elf64_Sym <offset aItmRegistertmc - offset byte_3C0, 20h, 0, 0, \ ; "_ITM_registerTMCloneTable"
                           offset dword_0, 0>
                Elf64_Sym <offset aGfortranStWrit - offset byte_3C0, 12h, 0, 0, \ ; "_gfortran_st_write_done"
                           offset dword_0, 0>
                Elf64_Sym <offset aCxaFinalize - offset byte_3C0, 22h, 0, 0, \ ; "__cxa_finalize"
                           offset dword_0, 0>
                Elf64_Sym <offset aGfortranSetOpt - offset byte_3C0, 12h, 0, 0, \ ; "_gfortran_set_options"
                           offset dword_0, 0>
                Elf64_Sym <offset aGfortranTransf - offset byte_3C0, 12h, 0, 0, \ ; "_gfortran_transfer_character_write"
                           offset dword_0, 0>
; ELF String Table
byte_3C0        db 0                    ; DATA XREF: LOAD:00000000000002D0↑o
                                        ; LOAD:00000000000002E8↑o ...
aLibgfortranSo4 db 'libgfortran.so.4',0 ; DATA XREF: LOAD:0000000000000508↓o
aItmDeregistert db '_ITM_deregisterTMCloneTable',0
                                        ; DATA XREF: LOAD:0000000000000330↑o
aGmonStart      db '__gmon_start__',0   ; DATA XREF: LOAD:00000000000002E8↑o
aItmRegistertmc db '_ITM_registerTMCloneTable',0
                                        ; DATA XREF: LOAD:0000000000000348↑o
aGfortranStWrit db '_gfortran_st_write_done',0
                                        ; DATA XREF: LOAD:0000000000000360↑o
aGfortranTransf db '_gfortran_transfer_character_write',0
                                        ; DATA XREF: LOAD:00000000000003A8↑o
aGfortranSetOpt db '_gfortran_set_options',0
                                        ; DATA XREF: LOAD:0000000000000390↑o
aGfortranStWrit_0 db '_gfortran_st_write',0
                                        ; DATA XREF: LOAD:0000000000000300↑o
aGfortranSetArg db '_gfortran_set_args',0
                                        ; DATA XREF: LOAD:00000000000002D0↑o
aLibcSo6        db 'libc.so.6',0        ; DATA XREF: LOAD:00000000000004E8↓o
aCxaFinalize    db '__cxa_finalize',0   ; DATA XREF: LOAD:0000000000000378↑o
aLibcStartMain  db '__libc_start_main',0
                                        ; DATA XREF: LOAD:0000000000000318↑o
aGlibc225       db 'GLIBC_2.2.5',0      ; DATA XREF: LOAD:00000000000004F8↓o
aGfortran7      db 'GFORTRAN_7',0       ; DATA XREF: LOAD:0000000000000518↓o
; ELF GNU Symbol Version Table
                dw 0
                dw 2                    ; _gfortran_set_args@@GFORTRAN_7
                dw 0                    ; local  symbol: __gmon_start__
                dw 2                    ; _gfortran_st_write@@GFORTRAN_7
                dw 3                    ; __libc_start_main@@GLIBC_2.2.5
                dw 0                    ; local  symbol: _ITM_deregisterTMCloneTable
                dw 0                    ; local  symbol: _ITM_registerTMCloneTable
                dw 2                    ; _gfortran_st_write_done@@GFORTRAN_7
                dw 3                    ; __cxa_finalize@@GLIBC_2.2.5
                dw 2                    ; _gfortran_set_options@@GFORTRAN_7
                dw 2                    ; _gfortran_transfer_character_write@@GFORTRAN_7
                dw 0
; ELF GNU Symbol Version Requirements
                Elf64_Verneed <1, 1, offset aLibcSo6 - offset byte_3C0, 10h, 20h> ; "libc.so.6"
                Elf64_Vernaux <9691A75h, 0, 3, offset aGlibc225 - offset byte_3C0, 0> ; "GLIBC_2.2.5"
                Elf64_Verneed <1, 1, offset aLibgfortranSo4 - offset byte_3C0, 10h, 0> ; "libgfortran.so.4"
                Elf64_Vernaux <792F967h, 0, 2, offset aGfortran7 - offset byte_3C0, 0> ; "GFORTRAN_7"
; ELF RELA Relocation Table
                Elf64_Rela <200D88h, 8, 7F0h> ; R_X86_64_RELATIVE +7F0h
                Elf64_Rela <200D90h, 8, 7B0h> ; R_X86_64_RELATIVE +7B0h
                Elf64_Rela <201008h, 8, 201008h> ; R_X86_64_RELATIVE +201008h
                Elf64_Rela <200FD8h, 200000006h, 0> ; R_X86_64_GLOB_DAT __gmon_start__
                Elf64_Rela <200FE0h, 400000006h, 0> ; R_X86_64_GLOB_DAT __libc_start_main
                Elf64_Rela <200FE8h, 500000006h, 0> ; R_X86_64_GLOB_DAT _ITM_deregisterTMCloneTable
                Elf64_Rela <200FF0h, 600000006h, 0> ; R_X86_64_GLOB_DAT _ITM_registerTMCloneTable
                Elf64_Rela <200FF8h, 800000006h, 0> ; R_X86_64_GLOB_DAT __cxa_finalize
; ELF JMPREL Relocation Table
                Elf64_Rela <200FB0h, 100000007h, 0> ; R_X86_64_JUMP_SLOT _gfortran_set_args
                Elf64_Rela <200FB8h, 300000007h, 0> ; R_X86_64_JUMP_SLOT _gfortran_st_write
                Elf64_Rela <200FC0h, 700000007h, 0> ; R_X86_64_JUMP_SLOT _gfortran_st_write_done
                Elf64_Rela <200FC8h, 900000007h, 0> ; R_X86_64_JUMP_SLOT _gfortran_set_options
                Elf64_Rela <200FD0h, 0A00000007h, 0> ; R_X86_64_JUMP_SLOT _gfortran_transfer_character_write
LOAD            ends

; ===========================================================================

; Segment type: Pure code
; Segment permissions: Read/Execute
_init           segment dword public 'CODE' use64
                assume cs:_init
                ;org 660h
                assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B R O U T I N E =======================================


                public _init_proc
_init_proc      proc near               ; CODE XREF: __libc_csu_init+2C↓p
                sub     rsp, 8          ; _init
                mov     rax, cs:__gmon_start___ptr
                test    rax, rax
                jz      short loc_672
                call    rax ; __gmon_start__

loc_672:                                ; CODE XREF: _init_proc+E↑j
                add     rsp, 8
                retn
_init_proc      endp

_init           ends

; ===========================================================================

; Segment type: Pure code
; Segment permissions: Read/Execute
LOAD            segment byte public 'CODE' use64
                assume cs:LOAD
                ;org 677h
                assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                align 20h
LOAD            ends

; ===========================================================================

; Segment type: Pure code
; Segment permissions: Read/Execute
_plt            segment para public 'CODE' use64
                assume cs:_plt
                ;org 680h
                assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B R O U T I N E =======================================


sub_680         proc near               ; CODE XREF: .plt:000000000000069B↓j
                                        ; .plt:00000000000006AB↓j ...
; __unwind {
                push    cs:qword_200FA0
                jmp     cs:qword_200FA8
sub_680         endp

; ---------------------------------------------------------------------------
                align 10h
; [00000006 BYTES: COLLAPSED FUNCTION __gfortran_set_args. PRESS NUMPAD+ TO EXPAND]
; ---------------------------------------------------------------------------
                push    0
                jmp     sub_680
; [00000006 BYTES: COLLAPSED FUNCTION __gfortran_st_write. PRESS NUMPAD+ TO EXPAND]
; ---------------------------------------------------------------------------
                push    1
                jmp     sub_680
; [00000006 BYTES: COLLAPSED FUNCTION __gfortran_st_write_done. PRESS NUMPAD+ TO EXPAND]
; ---------------------------------------------------------------------------
                push    2
                jmp     sub_680
; [00000006 BYTES: COLLAPSED FUNCTION __gfortran_set_options. PRESS NUMPAD+ TO EXPAND]
; ---------------------------------------------------------------------------
                push    3
                jmp     sub_680
; [00000006 BYTES: COLLAPSED FUNCTION __gfortran_transfer_character_write. PRESS NUMPAD+ TO EXPAND]
; ---------------------------------------------------------------------------
                push    4
                jmp     sub_680
; } // starts at 680
_plt            ends

; ===========================================================================

; Segment type: Pure code
; Segment permissions: Read/Execute
; Segment alignment 'qword' can not be represented in assembly
_plt_got        segment para public 'CODE' use64
                assume cs:_plt_got
                ;org 6E0h
                assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
; [00000006 BYTES: COLLAPSED FUNCTION __cxa_finalize. PRESS NUMPAD+ TO EXPAND]
                align 8
; } // starts at 6E0
_plt_got        ends

; ===========================================================================

; Segment type: Pure code
; Segment permissions: Read/Execute
LOAD            segment byte public 'CODE' use64
                assume cs:LOAD
                ;org 6E8h
                assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                align 10h
LOAD            ends

; ===========================================================================

; Segment type: Pure code
; Segment permissions: Read/Execute
_text           segment para public 'CODE' use64
                assume cs:_text
                ;org 6F0h
                assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B R O U T I N E =======================================

; Attributes: noreturn fuzzy-sp

                public _start
_start          proc near               ; DATA XREF: LOAD:0000000000000018↑o
; __unwind {
                xor     ebp, ebp
                mov     r9, rdx         ; rtld_fini
                pop     rsi             ; argc
                mov     rdx, rsp        ; ubp_av
                and     rsp, 0FFFFFFFFFFFFFFF0h
                push    rax
                push    rsp             ; stack_end
                lea     r8, __libc_csu_fini ; fini
                lea     rcx, __libc_csu_init ; init
                lea     rdi, main       ; main
                call    cs:__libc_start_main_ptr
                hlt
; } // starts at 6F0
_start          endp

; ---------------------------------------------------------------------------
                align 20h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

deregister_tm_clones proc near          ; CODE XREF: __do_global_dtors_aux:loc_7D3↓p
                lea     rdi, _edata
                push    rbp
                lea     rax, _edata
                cmp     rax, rdi
                mov     rbp, rsp
                jz      short loc_750
                mov     rax, cs:_ITM_deregisterTMCloneTable_ptr
                test    rax, rax
                jz      short loc_750
                pop     rbp
                jmp     rax
; ---------------------------------------------------------------------------
                align 10h

loc_750:                                ; CODE XREF: deregister_tm_clones+15↑j
                                        ; deregister_tm_clones+21↑j
                pop     rbp
                retn
deregister_tm_clones endp

; ---------------------------------------------------------------------------
                align 20h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

register_tm_clones proc near            ; CODE XREF: frame_dummy+5↓j
                lea     rdi, _edata
                lea     rsi, _edata
                push    rbp
                sub     rsi, rdi
                mov     rbp, rsp
                sar     rsi, 3
                mov     rax, rsi
                shr     rax, 3Fh
                add     rsi, rax
                sar     rsi, 1
                jz      short loc_7A0
                mov     rax, cs:_ITM_registerTMCloneTable_ptr
                test    rax, rax
                jz      short loc_7A0
                pop     rbp
                jmp     rax
; ---------------------------------------------------------------------------
                align 20h

loc_7A0:                                ; CODE XREF: register_tm_clones+26↑j
                                        ; register_tm_clones+32↑j
                pop     rbp
                retn
register_tm_clones endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================


__do_global_dtors_aux proc near         ; DATA XREF: .fini_array:__do_global_dtors_aux_fini_array_entry↓o
                cmp     cs:_edata, 0
                jnz     short locret_7E8
                cmp     cs:__cxa_finalize_ptr, 0
                push    rbp
                mov     rbp, rsp
                jz      short loc_7D3
                mov     rdi, cs:__dso_handle
                call    __cxa_finalize

loc_7D3:                                ; CODE XREF: __do_global_dtors_aux+15↑j
                call    deregister_tm_clones
                mov     cs:_edata, 1
                pop     rbp
                retn
; ---------------------------------------------------------------------------
                align 8

locret_7E8:                             ; CODE XREF: __do_global_dtors_aux+7↑j
                rep retn
__do_global_dtors_aux endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

frame_dummy     proc near               ; CODE XREF: __libc_csu_init+49↓p
                                        ; DATA XREF: .init_array:__frame_dummy_init_array_entry↓o
                push    rbp
                mov     rbp, rsp
                pop     rbp
                jmp     register_tm_clones
frame_dummy     endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

MAIN__          proc near               ; CODE XREF: main+31↓p

var_1E0         = dword ptr -1E0h
var_1DC         = dword ptr -1DCh
var_1D8         = qword ptr -1D8h
var_1D0         = dword ptr -1D0h

; __unwind {
                push    rbp
                mov     rbp, rsp
                sub     rsp, 1E0h
                lea     rax, aHelloF    ; "hello.f"
                mov     [rbp+var_1D8], rax
                mov     [rbp+var_1D0], 2
                mov     [rbp+var_1E0], 80h
                mov     [rbp+var_1DC], 6
                lea     rax, [rbp+var_1E0]
                mov     rdi, rax
                call    __gfortran_st_write
                lea     rax, [rbp+var_1E0]
                mov     edx, 0Ch
                lea     rsi, aHelloWorld ; "Hello World!"
                mov     rdi, rax
                call    __gfortran_transfer_character_write
                lea     rax, [rbp+var_1E0]
                mov     rdi, rax
                call    __gfortran_st_write_done
                nop
                leave
                retn
; } // starts at 7FA
MAIN__          endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; int __cdecl main(int argc, const char **argv, const char **envp)
                public main
main            proc near               ; DATA XREF: _start+1D↑o

var_10          = qword ptr -10h
var_4           = dword ptr -4

; __unwind {
                push    rbp
                mov     rbp, rsp
                sub     rsp, 10h
                mov     [rbp+var_4], edi
                mov     [rbp+var_10], rsi
                mov     rdx, [rbp+var_10]
                mov     eax, [rbp+var_4]
                mov     rsi, rdx
                mov     edi, eax
                call    __gfortran_set_args
                lea     rsi, options_1_3502 ; "D"
                mov     edi, 7
                call    __gfortran_set_options
                call    MAIN__
                mov     eax, 0
                leave
                retn
; } // starts at 86D
main            endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================


; void _libc_csu_init(void)
                public __libc_csu_init
__libc_csu_init proc near               ; DATA XREF: _start+16↑o
; __unwind {
                push    r15
                push    r14
                mov     r15, rdx
                push    r13
                push    r12
                lea     r12, __frame_dummy_init_array_entry
                push    rbp
                lea     rbp, __do_global_dtors_aux_fini_array_entry
                push    rbx
                mov     r13d, edi
                mov     r14, rsi
                sub     rbp, r12
                sub     rsp, 8
                sar     rbp, 3
                call    _init_proc
                test    rbp, rbp
                jz      short loc_906
                xor     ebx, ebx
                nop     dword ptr [rax+rax+00000000h]

loc_8F0:                                ; CODE XREF: __libc_csu_init+54↓j
                mov     rdx, r15
                mov     rsi, r14
                mov     edi, r13d
                call    ds:(__frame_dummy_init_array_entry - 200D88h)[r12+rbx*8]
                add     rbx, 1
                cmp     rbp, rbx
                jnz     short loc_8F0

loc_906:                                ; CODE XREF: __libc_csu_init+34↑j
                add     rsp, 8
                pop     rbx
                pop     rbp
                pop     r12
                pop     r13
                pop     r14
                pop     r15
                retn
; } // starts at 8B0
__libc_csu_init endp

; ---------------------------------------------------------------------------
                align 20h

; =============== S U B R O U T I N E =======================================


; void _libc_csu_fini(void)
                public __libc_csu_fini
__libc_csu_fini proc near               ; DATA XREF: _start+F↑o
; __unwind {
                rep retn
; } // starts at 920
__libc_csu_fini endp

_text           ends

; ===========================================================================

; Segment type: Pure code
; Segment permissions: Read/Execute
LOAD            segment byte public 'CODE' use64
                assume cs:LOAD
                ;org 922h
                assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                align 4
LOAD            ends

; ===========================================================================

; Segment type: Pure code
; Segment permissions: Read/Execute
_fini           segment dword public 'CODE' use64
                assume cs:_fini
                ;org 924h
                assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B R O U T I N E =======================================


                public _term_proc
_term_proc      proc near
                sub     rsp, 8          ; _fini
                add     rsp, 8
                retn
_term_proc      endp

_fini           ends

; ===========================================================================

; Segment type: Pure code
; Segment permissions: Read/Execute
LOAD            segment byte public 'CODE' use64
                assume cs:LOAD
                ;org 92Dh
                assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                align 10h
LOAD            ends

; ===========================================================================

; Segment type: Pure data
; Segment permissions: Read
_rodata         segment para public 'CONST' use64
                assume cs:_rodata
                ;org 930h
                public _IO_stdin_used
_IO_stdin_used  db    1
                db    0
                db    2
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
aHelloF         db 'hello.f',0          ; DATA XREF: MAIN__+B↑o
aHelloWorld     db 'Hello World!',0     ; DATA XREF: MAIN__+52↑o
                align 20h
options_1_3502  db 'D',0                ; DATA XREF: main+20↑o
                align 4
                db 0FFh
                db    3
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    1
                db    0
                db    0
                db    0
                db    1
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db  1Fh
                db    0
                db    0
                db    0
_rodata         ends

; ===========================================================================

; Segment type: Pure data
; Segment permissions: Read
_eh_frame_hdr   segment dword public 'CONST' use64
                assume cs:_eh_frame_hdr
                ;org 97Ch
__GNU_EH_FRAME_HDR db    1              ; DATA XREF: LOAD:00000000000001A0↑o
                db  1Bh
                db    3
                db  3Bh ; ;
                db  40h ; @
                db    0
                db    0
                db    0
                db    7
                db    0
                db    0
                db    0
                db    4
                db 0FDh
                db 0FFh
                db 0FFh
                db  8Ch
                db    0
                db    0
                db    0
                db  64h ; d
                db 0FDh
                db 0FFh
                db 0FFh
                db 0B4h
                db    0
                db    0
                db    0
                db  74h ; t
                db 0FDh
                db 0FFh
                db 0FFh
                db  5Ch ; \
                db    0
                db    0
                db    0
                db  7Eh ; ~
                db 0FEh
                db 0FFh
                db 0FFh
                db 0CCh
                db    0
                db    0
                db    0
                db 0F1h
                db 0FEh
                db 0FFh
                db 0FFh
                db 0ECh
                db    0
                db    0
                db    0
                db  34h ; 4
                db 0FFh
                db 0FFh
                db 0FFh
                db  0Ch
                db    1
                db    0
                db    0
                db 0A4h
                db 0FFh
                db 0FFh
                db 0FFh
                db  54h ; T
                db    1
                db    0
                db    0
_eh_frame_hdr   ends

; ===========================================================================

; Segment type: Pure data
; Segment permissions: Read
; Segment alignment 'qword' can not be represented in assembly
_eh_frame       segment para public 'CONST' use64
                assume cs:_eh_frame
                ;org 9C0h
                db  14h
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    1
                db  7Ah ; z
                db  52h ; R
                db    0
                db    1
                db  78h ; x
                db  10h
                db    1
                db  1Bh
                db  0Ch
                db    7
                db    8
                db  90h
                db    1
                db    7
                db  10h
                db  14h
                db    0
                db    0
                db    0
                db  1Ch
                db    0
                db    0
                db    0
                db  10h
                db 0FDh
                db 0FFh
                db 0FFh
                db  2Bh ; +
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db  14h
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    1
                db  7Ah ; z
                db  52h ; R
                db    0
                db    1
                db  78h ; x
                db  10h
                db    1
                db  1Bh
                db  0Ch
                db    7
                db    8
                db  90h
                db    1
                db    0
                db    0
                db  24h ; $
                db    0
                db    0
                db    0
                db  1Ch
                db    0
                db    0
                db    0
                db  70h ; p
                db 0FCh
                db 0FFh
                db 0FFh
                db  60h ; `
                db    0
                db    0
                db    0
                db    0
                db  0Eh
                db  10h
                db  46h ; F
                db  0Eh
                db  18h
                db  4Ah ; J
                db  0Fh
                db  0Bh
                db  77h ; w
                db    8
                db  80h
                db    0
                db  3Fh ; ?
                db  1Ah
                db  3Bh ; ;
                db  2Ah ; *
                db  33h ; 3
                db  24h ; $
                db  22h ; "
                db    0
                db    0
                db    0
                db    0
                db  14h
                db    0
                db    0
                db    0
                db  44h ; D
                db    0
                db    0
                db    0
                db 0A8h
                db 0FCh
                db 0FFh
                db 0FFh
                db    8
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db  1Ch
                db    0
                db    0
                db    0
                db  5Ch ; \
                db    0
                db    0
                db    0
                db 0AAh
                db 0FDh
                db 0FFh
                db 0FFh
                db  73h ; s
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db  10h
                db  86h
                db    2
                db  43h ; C
                db  0Dh
                db    6
                db    2
                db  6Eh ; n
                db  0Ch
                db    7
                db    8
                db    0
                db    0
                db  1Ch
                db    0
                db    0
                db    0
                db  7Ch ; |
                db    0
                db    0
                db    0
                db 0FDh
                db 0FDh
                db 0FFh
                db 0FFh
                db  3Dh ; =
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db  10h
                db  86h
                db    2
                db  43h ; C
                db  0Dh
                db    6
                db  78h ; x
                db  0Ch
                db    7
                db    8
                db    0
                db    0
                db    0
                db  44h ; D
                db    0
                db    0
                db    0
                db  9Ch
                db    0
                db    0
                db    0
                db  20h
                db 0FEh
                db 0FFh
                db 0FFh
                db  65h ; e
                db    0
                db    0
                db    0
                db    0
                db  42h ; B
                db  0Eh
                db  10h
                db  8Fh
                db    2
                db  42h ; B
                db  0Eh
                db  18h
                db  8Eh
                db    3
                db  45h ; E
                db  0Eh
                db  20h
                db  8Dh
                db    4
                db  42h ; B
                db  0Eh
                db  28h ; (
                db  8Ch
                db    5
                db  48h ; H
                db  0Eh
                db  30h ; 0
                db  86h
                db    6
                db  48h ; H
                db  0Eh
                db  38h ; 8
                db  83h
                db    7
                db  4Dh ; M
                db  0Eh
                db  40h ; @
                db  72h ; r
                db  0Eh
                db  38h ; 8
                db  41h ; A
                db  0Eh
                db  30h ; 0
                db  41h ; A
                db  0Eh
                db  28h ; (
                db  42h ; B
                db  0Eh
                db  20h
                db  42h ; B
                db  0Eh
                db  18h
                db  42h ; B
                db  0Eh
                db  10h
                db  42h ; B
                db  0Eh
                db    8
                db    0
                db  10h
                db    0
                db    0
                db    0
                db 0E4h
                db    0
                db    0
                db    0
                db  48h ; H
                db 0FEh
                db 0FFh
                db 0FFh
                db    2
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
__FRAME_END__   db    0
                db    0
                db    0
                db    0
_eh_frame       ends

; ELF Initialization Function Table
; ===========================================================================

; Segment type: Pure data
; Segment permissions: Read/Write
; Segment alignment 'qword' can not be represented in assembly
_init_array     segment para public 'DATA' use64
                assume cs:_init_array
                ;org 200D88h
__frame_dummy_init_array_entry dq offset frame_dummy
                                        ; DATA XREF: LOAD:00000000000000F8↑o
                                        ; LOAD:0000000000000210↑o ...
_init_array     ends                    ; Alternative name is '__init_array_start'

; ELF Termination Function Table
; ===========================================================================

; Segment type: Pure data
; Segment permissions: Read/Write
; Segment alignment 'qword' can not be represented in assembly
_fini_array     segment para public 'DATA' use64
                assume cs:_fini_array
                ;org 200D90h
__do_global_dtors_aux_fini_array_entry dq offset __do_global_dtors_aux
                                        ; DATA XREF: __libc_csu_init+13↑o
_fini_array     ends                    ; Alternative name is '__init_array_end'

; ELF Dynamic Information
; ===========================================================================

; Segment type: Pure data
; Segment permissions: Read/Write
LOAD            segment byte public 'DATA' use64
                assume cs:LOAD
                ;org 200D98h
_DYNAMIC        Elf64_Dyn <1, 1>        ; DATA XREF: LOAD:0000000000000130↑o
                                        ; .got:_GLOBAL_OFFSET_TABLE_↓o
                                        ; DT_NEEDED libgfortran.so.4
                Elf64_Dyn <1, 0CEh>     ; DT_NEEDED libc.so.6
                Elf64_Dyn <0Ch, 660h>   ; DT_INIT
                Elf64_Dyn <0Dh, 924h>   ; DT_FINI
                Elf64_Dyn <19h, 200D88h> ; DT_INIT_ARRAY
                Elf64_Dyn <1Bh, 8>      ; DT_INIT_ARRAYSZ
                Elf64_Dyn <1Ah, 200D90h> ; DT_FINI_ARRAY
                Elf64_Dyn <1Ch, 8>      ; DT_FINI_ARRAYSZ
                Elf64_Dyn <6FFFFEF5h, 298h> ; DT_GNU_HASH
                Elf64_Dyn <5, 3C0h>     ; DT_STRTAB
                Elf64_Dyn <6, 2B8h>     ; DT_SYMTAB
                Elf64_Dyn <0Ah, 110h>   ; DT_STRSZ
                Elf64_Dyn <0Bh, 18h>    ; DT_SYMENT
                Elf64_Dyn <15h, 0>      ; DT_DEBUG
                Elf64_Dyn <3, 200F98h>  ; DT_PLTGOT
                Elf64_Dyn <2, 78h>      ; DT_PLTRELSZ
                Elf64_Dyn <14h, 7>      ; DT_PLTREL
                Elf64_Dyn <17h, 5E8h>   ; DT_JMPREL
                Elf64_Dyn <7, 528h>     ; DT_RELA
                Elf64_Dyn <8, 0C0h>     ; DT_RELASZ
                Elf64_Dyn <9, 18h>      ; DT_RELAENT
                Elf64_Dyn <1Eh, 8>      ; DT_FLAGS
                Elf64_Dyn <6FFFFFFBh, 8000001h> ; DT_FLAGS_1
                Elf64_Dyn <6FFFFFFEh, 4E8h> ; DT_VERNEED
                Elf64_Dyn <6FFFFFFFh, 2> ; DT_VERNEEDNUM
                Elf64_Dyn <6FFFFFF0h, 4D0h> ; DT_VERSYM
                Elf64_Dyn <6FFFFFF9h, 3> ; DT_RELACOUNT
                Elf64_Dyn <0>           ; DT_NULL
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
LOAD            ends

; ===========================================================================

; Segment type: Pure data
; Segment permissions: Read/Write
; Segment alignment 'qword' can not be represented in assembly
_got            segment para public 'DATA' use64
                assume cs:_got
                ;org 200F98h
_GLOBAL_OFFSET_TABLE_ dq offset _DYNAMIC
qword_200FA0    dq 0                    ; DATA XREF: sub_680↑r
qword_200FA8    dq 0                    ; DATA XREF: sub_680+6↑r
_gfortran_set_args_ptr dq offset _gfortran_set_args
                                        ; DATA XREF: __gfortran_set_args↑r
_gfortran_st_write_ptr dq offset _gfortran_st_write
                                        ; DATA XREF: __gfortran_st_write↑r
_gfortran_st_write_done_ptr dq offset _gfortran_st_write_done
                                        ; DATA XREF: __gfortran_st_write_done↑r
_gfortran_set_options_ptr dq offset _gfortran_set_options
                                        ; DATA XREF: __gfortran_set_options↑r
_gfortran_transfer_character_write_ptr dq offset _gfortran_transfer_character_write
                                        ; DATA XREF: __gfortran_transfer_character_write↑r
__gmon_start___ptr dq offset __gmon_start__
                                        ; DATA XREF: _init_proc+4↑r
__libc_start_main_ptr dq offset __libc_start_main
                                        ; DATA XREF: _start+24↑r
_ITM_deregisterTMCloneTable_ptr dq offset _ITM_deregisterTMCloneTable
                                        ; DATA XREF: deregister_tm_clones+17↑r
_ITM_registerTMCloneTable_ptr dq offset _ITM_registerTMCloneTable
                                        ; DATA XREF: register_tm_clones+28↑r
__cxa_finalize_ptr dq offset __imp___cxa_finalize
                                        ; DATA XREF: __cxa_finalize↑r
                                        ; __do_global_dtors_aux+9↑r
_got            ends

; ===========================================================================

; Segment type: Pure data
; Segment permissions: Read/Write
; Segment alignment 'qword' can not be represented in assembly
_data           segment para public 'DATA' use64
                assume cs:_data
                ;org 201000h
                public __data_start ; weak
__data_start    db    0                 ; Alternative name is '__data_start'
                                        ; data_start
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                public __dso_handle
__dso_handle    dq offset __dso_handle  ; DATA XREF: __do_global_dtors_aux+17↑r
                                        ; .data:__dso_handle↓o
_data           ends

; ===========================================================================

; Segment type: Uninitialized
; Segment permissions: Read/Write
_bss            segment byte public 'BSS' use64
                assume cs:_bss
                ;org 201010h
                assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                public _edata
_edata          db ?                    ; DATA XREF: deregister_tm_clones↑o
                                        ; deregister_tm_clones+8↑o ...
                                        ; Alternative name is '__TMC_END__'
                                        ; completed.7696
                                        ; __bss_start
                align 8
_bss            ends

; ===========================================================================

; Segment type: Zero-length
_prgend         segment byte public '' use64
_end            label byte
_prgend         ends

; ===========================================================================

; Segment type: Externs
; extern
                extrn _gfortran_set_args:near
                                        ; DATA XREF: .got:_gfortran_set_args_ptr↑o
                extrn _gfortran_st_write:near
                                        ; DATA XREF: .got:_gfortran_st_write_ptr↑o
; int __cdecl _libc_start_main(int (__cdecl *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)
                extrn __libc_start_main:near
                                        ; CODE XREF: _start+24↑p
                                        ; DATA XREF: .got:__libc_start_main_ptr↑o
                extrn _gfortran_st_write_done:near
                                        ; DATA XREF: .got:_gfortran_st_write_done_ptr↑o
                extrn __imp___cxa_finalize:near ; weak
                                        ; DATA XREF: .got:__cxa_finalize_ptr↑o
                extrn _gfortran_set_options:near
                                        ; DATA XREF: .got:_gfortran_set_options_ptr↑o
                extrn _gfortran_transfer_character_write:near
                                        ; DATA XREF: .got:_gfortran_transfer_character_write_ptr↑o
                extrn __gmon_start__:near ; weak
                                        ; CODE XREF: _init_proc+10↑p
                                        ; DATA XREF: .got:__gmon_start___ptr↑o
                extrn _ITM_deregisterTMCloneTable ; weak
                                        ; DATA XREF: .got:_ITM_deregisterTMCloneTable_ptr↑o
                extrn _ITM_registerTMCloneTable ; weak
                                        ; DATA XREF: .got:_ITM_registerTMCloneTable_ptr↑o


                end _start
