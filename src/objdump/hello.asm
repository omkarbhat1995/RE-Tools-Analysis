; ---------------------------------------------------------------------------

Elf64_Sym       struc ; (sizeof=0x18, align=0x8, mappedto_1)
                                        ; XREF: LOAD:00000000004002B8/r
                                        ; LOAD:00000000004002D0/r ...
st_name         dd ?                    ; offset (00400318)
st_info         db ?
st_other        db ?
st_shndx        dw ?
st_value        dq ?                    ; offset (00000000)
st_size         dq ?
Elf64_Sym       ends

; ---------------------------------------------------------------------------

Elf64_Rela      struc ; (sizeof=0x18, align=0x8, copyof_2)
                                        ; XREF: LOAD:0000000000400380/r
                                        ; LOAD:0000000000400398/r ...
r_offset        dq ?
r_info          dq ?
r_addend        dq ?
Elf64_Rela      ends

; ---------------------------------------------------------------------------

Elf64_Dyn       struc ; (sizeof=0x10, align=0x8, copyof_3)
                                        ; XREF: LOAD:_DYNAMIC/r
                                        ; LOAD:0000000000600E38/r ...
d_tag           dq ?
d_un            dq ?
Elf64_Dyn       ends

; ---------------------------------------------------------------------------

Elf64_Verneed   struc ; (sizeof=0x10, align=0x4, mappedto_4)
                                        ; XREF: LOAD:0000000000400360/r
vn_version      dw ?
vn_cnt          dw ?
vn_file         dd ?                    ; offset (00400318)
vn_aux          dd ?
vn_next         dd ?
Elf64_Verneed   ends

; ---------------------------------------------------------------------------

Elf64_Vernaux   struc ; (sizeof=0x10, align=0x4, mappedto_5)
                                        ; XREF: LOAD:0000000000400370/r
vna_hash        dd ?
vna_flags       dw ?
vna_other       dw ?
vna_name        dd ?                    ; offset (00400318)
vna_next        dd ?
Elf64_Vernaux   ends


;
; +-------------------------------------------------------------------------+
; |   This file has been generated by The Interactive Disassembler (IDA)    |
; |           Copyright (c) 2018 Hex-Rays, <support@hex-rays.com>           |
; |                      License info: 48-B51B-7454-28                      |
; |            University of Virginia / Dpt of Computer Science             |
; +-------------------------------------------------------------------------+
;
; Input SHA256 : 1DA97EB19D141F83CDEBAB35890F2584874AA63E50A10684771E8DD9CBC1C437
; Input MD5    : F822064E10D307E701244BE38BA45E38
; Input CRC32  : 103DF262

; File Name   : /u/zy8ez/zoya/hello
; Format      : ELF64 for x86-64 (Executable)
; Imagebase   : 400000
; Interpreter '/lib64/ld-linux-x86-64.so.2'
; Needed Library 'libc.so.6'
;
; Source File : 'crtstuff.c'
; Source File : 'hello.c'
; Source File : 'crtstuff.c'

                .686p
                .mmx
                .model flat
.intel_syntax noprefix

; ===========================================================================

; Segment type: Pure code
; Segment permissions: Read/Execute
LOAD            segment byte public 'CODE' use64
                assume cs:LOAD
                ;org 400000h
                assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
dword_400000    dd 464C457Fh            ; DATA XREF: LOAD:00000000004000C0↓o
                                        ; File format: \x7FELF
                db 2                    ; File class: 64-bit
                db 1                    ; Data encoding: little-endian
                db 1                    ; File version
                db 0                    ; OS/ABI: UNIX System V ABI
                db 0                    ; ABI Version
                db 7 dup(0)             ; Padding
                dw 2                    ; File type: Executable
                dw 3Eh                  ; Machine: x86-64
                dd 1                    ; File version
                dq offset _start        ; Entry point
                dq 40h                  ; PHT file offset
                dq 11A0h                ; SHT file offset
                dd 0                    ; Processor-specific flags
                dw 40h                  ; ELF header size
                dw 38h                  ; PHT entry size
                dw 9                    ; Number of entries in PHT
                dw 40h                  ; SHT entry size
                dw 1Eh                  ; Number of entries in SHT
                dw 1Bh                  ; SHT entry index for string table
; ELF64 Program Header
; PHT Entry 0
dword_400040    dd 6                    ; DATA XREF: LOAD:0000000000400050↓o
                                        ; Type: PHDR
                dd 5                    ; Flags
                dq 40h                  ; File offset
                dq offset dword_400040  ; Virtual address
                dq 400040h              ; Physical address
                dq 1F8h                 ; Size in file image
                dq 1F8h                 ; Size in memory image
                dq 8                    ; Alignment
; PHT Entry 1
                dd 3                    ; Type: INTERP
                dd 4                    ; Flags
                dq 238h                 ; File offset
                dq offset aLib64LdLinuxX8 ; Virtual address
                dq 400238h              ; Physical address
                dq 1Ch                  ; Size in file image
                dq 1Ch                  ; Size in memory image
                dq 1                    ; Alignment
; PHT Entry 2
                dd 1                    ; Type: LOAD
                dd 5                    ; Flags
                dq 0                    ; File offset
                dq offset dword_400000  ; Virtual address
                dq 400000h              ; Physical address
                dq 70Ch                 ; Size in file image
                dq 70Ch                 ; Size in memory image
                dq 200000h              ; Alignment
; PHT Entry 3
                dd 1                    ; Type: LOAD
                dd 6                    ; Flags
                dq 0E10h                ; File offset
                dq offset __frame_dummy_init_array_entry ; Virtual address
                dq 600E10h              ; Physical address
                dq 230h                 ; Size in file image
                dq 238h                 ; Size in memory image
                dq 200000h              ; Alignment
; PHT Entry 4
                dd 2                    ; Type: DYNAMIC
                dd 6                    ; Flags
                dq 0E28h                ; File offset
                dq offset _DYNAMIC      ; Virtual address
                dq 600E28h              ; Physical address
                dq 1D0h                 ; Size in file image
                dq 1D0h                 ; Size in memory image
                dq 8                    ; Alignment
; PHT Entry 5
                dd 4                    ; Type: NOTE
                dd 4                    ; Flags
                dq 254h                 ; File offset
                dq offset dword_400254  ; Virtual address
                dq 400254h              ; Physical address
                dq 44h                  ; Size in file image
                dq 44h                  ; Size in memory image
                dq 4                    ; Alignment
; PHT Entry 6
                dd 6474E550h            ; Type: EH_FRAME
                dd 4                    ; Flags
                dq 5E4h                 ; File offset
                dq offset unk_4005E4    ; Virtual address
                dq 4005E4h              ; Physical address
                dq 34h                  ; Size in file image
                dq 34h                  ; Size in memory image
                dq 4                    ; Alignment
; PHT Entry 7
                dd 6474E551h            ; Type: STACK
                dd 6                    ; Flags
                dq 0                    ; File offset
                dq 0                    ; Virtual address
                dq 0                    ; Physical address
                dq 0                    ; Size in file image
                dq 0                    ; Size in memory image
                dq 10h                  ; Alignment
; PHT Entry 8
                dd 6474E552h            ; Type: RO-AFTER
                dd 4                    ; Flags
                dq 0E10h                ; File offset
                dq offset __frame_dummy_init_array_entry ; Virtual address
                dq 600E10h              ; Physical address
                dq 1F0h                 ; Size in file image
                dq 1F0h                 ; Size in memory image
                dq 1                    ; Alignment
aLib64LdLinuxX8 db '/lib64/ld-linux-x86-64.so.2',0
                                        ; DATA XREF: LOAD:0000000000400088↑o
dword_400254    dd 4                    ; DATA XREF: LOAD:0000000000400168↑o
                dq 100000010h, 554E47h, 600000002h, 400000018h, 300000014h
                dq 6F23C6F00554E47h, 0E895C92781563838h, 68267DBCA5CD1BB5h
; ELF GNU Hash Table
elf_gnu_hash_nbuckets dd 1
elf_gnu_hash_symbias dd 1
elf_gnu_hash_bitmask_nwords dd 1
elf_gnu_hash_shift dd 0
elf_gnu_hash_indexes dq 0
elf_gnu_hash_bucket dd 0
elf_gnu_hash_chain dd 0
; ELF Symbol Table
                Elf64_Sym <0>
                Elf64_Sym <offset aPrintf - offset byte_400318, 12h, 0, 0, 0, 0> ; "printf"
                Elf64_Sym <offset aLibcStartMain - offset byte_400318, 12h, 0, 0, 0, \ ; "__libc_start_main"
                           0>
                Elf64_Sym <offset aGmonStart - offset byte_400318, 20h, 0, 0, 0, 0> ; "__gmon_start__"
; ELF String Table
byte_400318     db 0                    ; DATA XREF: LOAD:00000000004002D0↑o
                                        ; LOAD:00000000004002E8↑o ...
aLibcSo6        db 'libc.so.6',0        ; DATA XREF: LOAD:0000000000400360↓o
aPrintf         db 'printf',0           ; DATA XREF: LOAD:00000000004002D0↑o
aLibcStartMain  db '__libc_start_main',0
                                        ; DATA XREF: LOAD:00000000004002E8↑o
aGmonStart      db '__gmon_start__',0   ; DATA XREF: LOAD:0000000000400300↑o
aGlibc225       db 'GLIBC_2.2.5',0      ; DATA XREF: LOAD:0000000000400370↓o
                align 8
; ELF GNU Symbol Version Table
                dw 0
                dw 2                    ; printf@@GLIBC_2.2.5
                dw 2                    ; __libc_start_main@@GLIBC_2.2.5
                dw 0                    ; local  symbol: __gmon_start__
; ELF GNU Symbol Version Requirements
                Elf64_Verneed <1, 1, offset aLibcSo6 - offset byte_400318, 10h, 0> ; "libc.so.6"
                Elf64_Vernaux <9691A75h, 0, 2, offset aGlibc225 - offset byte_400318, \ ; "GLIBC_2.2.5"
                               0>
; ELF RELA Relocation Table
                Elf64_Rela <600FF8h, 300000006h, 0> ; R_X86_64_GLOB_DAT __gmon_start__
; ELF JMPREL Relocation Table
                Elf64_Rela <601018h, 100000007h, 0> ; R_X86_64_JUMP_SLOT printf
                Elf64_Rela <601020h, 200000007h, 0> ; R_X86_64_JUMP_SLOT __libc_start_main
                Elf64_Rela <601028h, 300000007h, 0> ; R_X86_64_JUMP_SLOT __gmon_start__
LOAD            ends

; ===========================================================================

; Segment type: Pure code
; Segment permissions: Read/Execute
_init           segment dword public 'CODE' use64
                assume cs:_init
                ;org 4003E0h
                assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B R O U T I N E =======================================


                public _init_proc
_init_proc      proc near               ; CODE XREF: __libc_csu_init+2E↓p
                sub     rsp, 8          ; _init
                mov     rax, cs:__gmon_start___ptr
                test    rax, rax
                jz      short loc_4003F5
                call    ___gmon_start__

loc_4003F5:                             ; CODE XREF: _init_proc+E↑j
                add     rsp, 8
                retn
_init_proc      endp

_init           ends

; ===========================================================================

; Segment type: Pure code
; Segment permissions: Read/Execute
LOAD            segment byte public 'CODE' use64
                assume cs:LOAD
                ;org 4003FAh
                assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                align 20h
LOAD            ends

; ===========================================================================

; Segment type: Pure code
; Segment permissions: Read/Execute
_plt            segment para public 'CODE' use64
                assume cs:_plt
                ;org 400400h
                assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B R O U T I N E =======================================


sub_400400      proc near               ; CODE XREF: .plt:000000000040041B↓j
                                        ; .plt:000000000040042B↓j ...
; __unwind {
                push    cs:qword_601008
                jmp     cs:qword_601010
sub_400400      endp

; ---------------------------------------------------------------------------
                align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _printf. PRESS NUMPAD+ TO EXPAND]
; ---------------------------------------------------------------------------
                push    0
                jmp     sub_400400
; [00000006 BYTES: COLLAPSED FUNCTION ___libc_start_main. PRESS NUMPAD+ TO EXPAND]
; ---------------------------------------------------------------------------
                push    1
                jmp     sub_400400
; [00000006 BYTES: COLLAPSED FUNCTION ___gmon_start__. PRESS NUMPAD+ TO EXPAND]
; ---------------------------------------------------------------------------
                push    2
                jmp     sub_400400
; } // starts at 400400
_plt            ends

; ===========================================================================

; Segment type: Pure code
; Segment permissions: Read/Execute
_text           segment para public 'CODE' use64
                assume cs:_text
                ;org 400440h
                assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B R O U T I N E =======================================

; Attributes: noreturn fuzzy-sp

                public _start
_start          proc near               ; DATA XREF: LOAD:0000000000400018↑o
; __unwind {
                xor     ebp, ebp
                mov     r9, rdx         ; rtld_fini
                pop     rsi             ; argc
                mov     rdx, rsp        ; ubp_av
                and     rsp, 0FFFFFFFFFFFFFFF0h
                push    rax
                push    rsp             ; stack_end
                mov     r8, offset __libc_csu_fini ; fini
                mov     rcx, offset __libc_csu_init ; init
                mov     rdi, offset main ; main
                call    ___libc_start_main
                hlt
; } // starts at 400440
_start          endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

deregister_tm_clones proc near          ; CODE XREF: __do_global_dtors_aux+D↓p
                mov     eax, offset unk_601047
                push    rbp
                sub     rax, offset __bss_start
                cmp     rax, 0Eh
                mov     rbp, rsp
                ja      short loc_400487

loc_400485:                             ; CODE XREF: deregister_tm_clones+1F↓j
                pop     rbp
                retn
; ---------------------------------------------------------------------------

loc_400487:                             ; CODE XREF: deregister_tm_clones+13↑j
                mov     eax, 0
                test    rax, rax
                jz      short loc_400485
                pop     rbp
                mov     edi, offset __bss_start
                jmp     rax
deregister_tm_clones endp

; ---------------------------------------------------------------------------
                align 20h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

register_tm_clones proc near            ; CODE XREF: frame_dummy+20↓j
                                        ; frame_dummy:loc_400528↓j
                mov     eax, offset __bss_start
                push    rbp
                sub     rax, offset __bss_start
                sar     rax, 3
                mov     rbp, rsp
                mov     rdx, rax
                shr     rdx, 3Fh
                add     rax, rdx
                sar     rax, 1
                jnz     short loc_4004C4

loc_4004C2:                             ; CODE XREF: register_tm_clones+2C↓j
                pop     rbp
                retn
; ---------------------------------------------------------------------------

loc_4004C4:                             ; CODE XREF: register_tm_clones+20↑j
                mov     edx, 0
                test    rdx, rdx
                jz      short loc_4004C2
                pop     rbp
                mov     rsi, rax
                mov     edi, offset __bss_start
                jmp     rdx
register_tm_clones endp

; ---------------------------------------------------------------------------
                align 20h

; =============== S U B R O U T I N E =======================================


__do_global_dtors_aux proc near         ; DATA XREF: .fini_array:__do_global_dtors_aux_fini_array_entry↓o
                cmp     cs:__bss_start, 0
                jnz     short locret_4004FA
                push    rbp
                mov     rbp, rsp
                call    deregister_tm_clones
                pop     rbp
                mov     cs:__bss_start, 1

locret_4004FA:                          ; CODE XREF: __do_global_dtors_aux+7↑j
                rep retn
__do_global_dtors_aux endp

; ---------------------------------------------------------------------------
                align 20h

; =============== S U B R O U T I N E =======================================


frame_dummy     proc near               ; CODE XREF: __libc_csu_init+49↓p
                                        ; DATA XREF: .init_array:__frame_dummy_init_array_entry↓o
                cmp     cs:__JCR_LIST__, 0
                jz      short loc_400528
                mov     eax, 0
                test    rax, rax
                jz      short loc_400528
                push    rbp
                mov     edi, offset __JCR_LIST__
                mov     rbp, rsp
                call    rax
                pop     rbp
                jmp     register_tm_clones
; ---------------------------------------------------------------------------
                align 8

loc_400528:                             ; CODE XREF: frame_dummy+8↑j
                                        ; frame_dummy+12↑j
                jmp     register_tm_clones
frame_dummy     endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; int __cdecl main(int argc, const char **argv, const char **envp)
                public main
main            proc near               ; DATA XREF: _start+1D↑o
; __unwind {
                push    rbp
                mov     rbp, rsp
                mov     edi, offset format ; "Hello, World!"
                mov     eax, 0
                call    _printf
                mov     eax, 0
                pop     rbp
                retn
; } // starts at 40052D
main            endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================


; void _libc_csu_init(void)
                public __libc_csu_init
__libc_csu_init proc near               ; DATA XREF: _start+16↑o
; __unwind {
                push    r15
                mov     r15d, edi
                push    r14
                mov     r14, rsi
                push    r13
                mov     r13, rdx
                push    r12
                lea     r12, __frame_dummy_init_array_entry
                push    rbp
                lea     rbp, __do_global_dtors_aux_fini_array_entry
                push    rbx
                sub     rbp, r12
                xor     ebx, ebx
                sar     rbp, 3
                sub     rsp, 8
                call    _init_proc
                test    rbp, rbp
                jz      short loc_4005A6
                nop     dword ptr [rax+rax+00000000h]

loc_400590:                             ; CODE XREF: __libc_csu_init+54↓j
                mov     rdx, r13
                mov     rsi, r14
                mov     edi, r15d
                call    ds:(__frame_dummy_init_array_entry - 600E10h)[r12+rbx*8]
                add     rbx, 1
                cmp     rbx, rbp
                jnz     short loc_400590

loc_4005A6:                             ; CODE XREF: __libc_csu_init+36↑j
                add     rsp, 8
                pop     rbx
                pop     rbp
                pop     r12
                pop     r13
                pop     r14
                pop     r15
                retn
; } // starts at 400550
__libc_csu_init endp

; ---------------------------------------------------------------------------
                align 20h

; =============== S U B R O U T I N E =======================================


; void _libc_csu_fini(void)
                public __libc_csu_fini
__libc_csu_fini proc near               ; DATA XREF: _start+F↑o
; __unwind {
                rep retn
; } // starts at 4005C0
__libc_csu_fini endp

_text           ends

; ===========================================================================

; Segment type: Pure code
; Segment permissions: Read/Execute
LOAD            segment byte public 'CODE' use64
                assume cs:LOAD
                ;org 4005C2h
                assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                align 4
LOAD            ends

; ===========================================================================

; Segment type: Pure code
; Segment permissions: Read/Execute
_fini           segment dword public 'CODE' use64
                assume cs:_fini
                ;org 4005C4h
                assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B R O U T I N E =======================================


                public _term_proc
_term_proc      proc near
                sub     rsp, 8          ; _fini
                add     rsp, 8
                retn
_term_proc      endp

_fini           ends

; ===========================================================================

; Segment type: Pure code
; Segment permissions: Read/Execute
LOAD            segment byte public 'CODE' use64
                assume cs:LOAD
                ;org 4005CDh
                assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                align 10h
LOAD            ends

; ===========================================================================

; Segment type: Pure data
; Segment permissions: Read
_rodata         segment dword public 'CONST' use64
                assume cs:_rodata
                ;org 4005D0h
                public _IO_stdin_used
_IO_stdin_used  db    1
                db    0
                db    2
                db    0
; char format[]
format          db 'Hello, World!',0    ; DATA XREF: main+4↑o
_rodata         ends

; ===========================================================================

; Segment type: Pure code
; Segment permissions: Read/Execute
LOAD            segment byte public 'CODE' use64
                assume cs:LOAD
                ;org 4005E2h
                assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                align 4
LOAD            ends

; ===========================================================================

; Segment type: Pure data
; Segment permissions: Read
_eh_frame_hdr   segment dword public 'CONST' use64
                assume cs:_eh_frame_hdr
                ;org 4005E4h
unk_4005E4      db    1                 ; DATA XREF: LOAD:00000000004001A0↑o
                db  1Bh
                db    3
                db  3Bh ; ;
                db  30h ; 0
                db    0
                db    0
                db    0
                db    5
                db    0
                db    0
                db    0
                db  1Ch
                db 0FEh
                db 0FFh
                db 0FFh
                db  7Ch ; |
                db    0
                db    0
                db    0
                db  5Ch ; \
                db 0FEh
                db 0FFh
                db 0FFh
                db  4Ch ; L
                db    0
                db    0
                db    0
                db  49h ; I
                db 0FFh
                db 0FFh
                db 0FFh
                db 0A4h
                db    0
                db    0
                db    0
                db  6Ch ; l
                db 0FFh
                db 0FFh
                db 0FFh
                db 0C4h
                db    0
                db    0
                db    0
                db 0DCh
                db 0FFh
                db 0FFh
                db 0FFh
                db  0Ch
                db    1
                db    0
                db    0
_eh_frame_hdr   ends

; ===========================================================================

; Segment type: Pure data
; Segment permissions: Read
; Segment alignment 'qword' can not be represented in assembly
_eh_frame       segment para public 'CONST' use64
                assume cs:_eh_frame
                ;org 400618h
                db  14h
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    1
                db  7Ah ; z
                db  52h ; R
                db    0
                db    1
                db  78h ; x
                db  10h
                db    1
                db  1Bh
                db  0Ch
                db    7
                db    8
                db  90h
                db    1
                db    7
                db  10h
                db  14h
                db    0
                db    0
                db    0
                db  1Ch
                db    0
                db    0
                db    0
                db    8
                db 0FEh
                db 0FFh
                db 0FFh
                db  2Ah ; *
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db  14h
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    1
                db  7Ah ; z
                db  52h ; R
                db    0
                db    1
                db  78h ; x
                db  10h
                db    1
                db  1Bh
                db  0Ch
                db    7
                db    8
                db  90h
                db    1
                db    0
                db    0
                db  24h ; $
                db    0
                db    0
                db    0
                db  1Ch
                db    0
                db    0
                db    0
                db  98h
                db 0FDh
                db 0FFh
                db 0FFh
                db  40h ; @
                db    0
                db    0
                db    0
                db    0
                db  0Eh
                db  10h
                db  46h ; F
                db  0Eh
                db  18h
                db  4Ah ; J
                db  0Fh
                db  0Bh
                db  77h ; w
                db    8
                db  80h
                db    0
                db  3Fh ; ?
                db  1Ah
                db  3Bh ; ;
                db  2Ah ; *
                db  33h ; 3
                db  24h ; $
                db  22h ; "
                db    0
                db    0
                db    0
                db    0
                db  1Ch
                db    0
                db    0
                db    0
                db  44h ; D
                db    0
                db    0
                db    0
                db  9Dh
                db 0FEh
                db 0FFh
                db 0FFh
                db  1Ah
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db  10h
                db  86h
                db    2
                db  43h ; C
                db  0Dh
                db    6
                db  55h ; U
                db  0Ch
                db    7
                db    8
                db    0
                db    0
                db    0
                db  44h ; D
                db    0
                db    0
                db    0
                db  64h ; d
                db    0
                db    0
                db    0
                db 0A0h
                db 0FEh
                db 0FFh
                db 0FFh
                db  65h ; e
                db    0
                db    0
                db    0
                db    0
                db  42h ; B
                db  0Eh
                db  10h
                db  8Fh
                db    2
                db  45h ; E
                db  0Eh
                db  18h
                db  8Eh
                db    3
                db  45h ; E
                db  0Eh
                db  20h
                db  8Dh
                db    4
                db  45h ; E
                db  0Eh
                db  28h ; (
                db  8Ch
                db    5
                db  48h ; H
                db  0Eh
                db  30h ; 0
                db  86h
                db    6
                db  48h ; H
                db  0Eh
                db  38h ; 8
                db  83h
                db    7
                db  4Dh ; M
                db  0Eh
                db  40h ; @
                db  6Ch ; l
                db  0Eh
                db  38h ; 8
                db  41h ; A
                db  0Eh
                db  30h ; 0
                db  41h ; A
                db  0Eh
                db  28h ; (
                db  42h ; B
                db  0Eh
                db  20h
                db  42h ; B
                db  0Eh
                db  18h
                db  42h ; B
                db  0Eh
                db  10h
                db  42h ; B
                db  0Eh
                db    8
                db    0
                db  14h
                db    0
                db    0
                db    0
                db 0ACh
                db    0
                db    0
                db    0
                db 0C8h
                db 0FEh
                db 0FFh
                db 0FFh
                db    2
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
__FRAME_END__   db    0
                db    0
                db    0
                db    0
_eh_frame       ends

; ELF Initialization Function Table
; ===========================================================================

; Segment type: Pure data
; Segment permissions: Read/Write
; Segment alignment 'qword' can not be represented in assembly
_init_array     segment para public 'DATA' use64
                assume cs:_init_array
                ;org 600E10h
__frame_dummy_init_array_entry dq offset frame_dummy
                                        ; DATA XREF: LOAD:00000000004000F8↑o
                                        ; LOAD:0000000000400210↑o ...
_init_array     ends                    ; Alternative name is '__init_array_start'

; ELF Termination Function Table
; ===========================================================================

; Segment type: Pure data
; Segment permissions: Read/Write
; Segment alignment 'qword' can not be represented in assembly
_fini_array     segment para public 'DATA' use64
                assume cs:_fini_array
                ;org 600E18h
__do_global_dtors_aux_fini_array_entry dq offset __do_global_dtors_aux
                                        ; DATA XREF: __libc_csu_init+19↑o
_fini_array     ends                    ; Alternative name is '__init_array_end'

; ===========================================================================

; Segment type: Pure data
; Segment permissions: Read/Write
; Segment alignment 'qword' can not be represented in assembly
_jcr            segment para public 'DATA' use64
                assume cs:_jcr
                ;org 600E20h
__JCR_LIST__    dq 0                    ; DATA XREF: frame_dummy↑r
                                        ; frame_dummy+15↑o
_jcr            ends

; ELF Dynamic Information
; ===========================================================================

; Segment type: Pure data
; Segment permissions: Read/Write
LOAD            segment byte public 'DATA' use64
                assume cs:LOAD
                ;org 600E28h
_DYNAMIC        Elf64_Dyn <1, 1>        ; DATA XREF: LOAD:0000000000400130↑o
                                        ; .got.plt:_GLOBAL_OFFSET_TABLE_↓o
                                        ; DT_NEEDED libc.so.6
                Elf64_Dyn <0Ch, 4003E0h> ; DT_INIT
                Elf64_Dyn <0Dh, 4005C4h> ; DT_FINI
                Elf64_Dyn <19h, 600E10h> ; DT_INIT_ARRAY
                Elf64_Dyn <1Bh, 8>      ; DT_INIT_ARRAYSZ
                Elf64_Dyn <1Ah, 600E18h> ; DT_FINI_ARRAY
                Elf64_Dyn <1Ch, 8>      ; DT_FINI_ARRAYSZ
                Elf64_Dyn <6FFFFEF5h, 400298h> ; DT_GNU_HASH
                Elf64_Dyn <5, 400318h>  ; DT_STRTAB
                Elf64_Dyn <6, 4002B8h>  ; DT_SYMTAB
                Elf64_Dyn <0Ah, 3Fh>    ; DT_STRSZ
                Elf64_Dyn <0Bh, 18h>    ; DT_SYMENT
                Elf64_Dyn <15h, 0>      ; DT_DEBUG
                Elf64_Dyn <3, 601000h>  ; DT_PLTGOT
                Elf64_Dyn <2, 48h>      ; DT_PLTRELSZ
                Elf64_Dyn <14h, 7>      ; DT_PLTREL
                Elf64_Dyn <17h, 400398h> ; DT_JMPREL
                Elf64_Dyn <7, 400380h>  ; DT_RELA
                Elf64_Dyn <8, 18h>      ; DT_RELASZ
                Elf64_Dyn <9, 18h>      ; DT_RELAENT
                Elf64_Dyn <6FFFFFFEh, 400360h> ; DT_VERNEED
                Elf64_Dyn <6FFFFFFFh, 1> ; DT_VERNEEDNUM
                Elf64_Dyn <6FFFFFF0h, 400358h> ; DT_VERSYM
                Elf64_Dyn <0>           ; DT_NULL
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
LOAD            ends

; ===========================================================================

; Segment type: Pure data
; Segment permissions: Read/Write
; Segment alignment 'qword' can not be represented in assembly
_got            segment para public 'DATA' use64
                assume cs:_got
                ;org 600FF8h
__gmon_start___ptr dq offset __gmon_start__
                                        ; DATA XREF: _init_proc+4↑r
_got            ends

; ===========================================================================

; Segment type: Pure data
; Segment permissions: Read/Write
; Segment alignment 'qword' can not be represented in assembly
_got_plt        segment para public 'DATA' use64
                assume cs:_got_plt
                ;org 601000h
_GLOBAL_OFFSET_TABLE_ dq offset _DYNAMIC
qword_601008    dq 0                    ; DATA XREF: sub_400400↑r
qword_601010    dq 0                    ; DATA XREF: sub_400400+6↑r
off_601018      dq offset printf        ; DATA XREF: _printf↑r
off_601020      dq offset __libc_start_main
                                        ; DATA XREF: ___libc_start_main↑r
off_601028      dq offset __gmon_start__
                                        ; DATA XREF: ___gmon_start__↑r
_got_plt        ends

; ===========================================================================

; Segment type: Pure data
; Segment permissions: Read/Write
; Segment alignment 'qword' can not be represented in assembly
_data           segment para public 'DATA' use64
                assume cs:_data
                ;org 601030h
                public __data_start ; weak
__data_start    db    0                 ; Alternative name is '__data_start'
                                        ; data_start
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                public __dso_handle
__dso_handle    db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
_data           ends

; ===========================================================================

; Segment type: Uninitialized
; Segment permissions: Read/Write
_bss            segment byte public 'BSS' use64
                assume cs:_bss
                ;org 601040h
                assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                public __bss_start
__bss_start     db ?                    ; DATA XREF: deregister_tm_clones+6↑o
                                        ; deregister_tm_clones+22↑o ...
                                        ; Alternative name is '__TMC_END__'
                                        ; completed.6982
                                        ; _edata
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
unk_601047      db    ? ;               ; DATA XREF: deregister_tm_clones↑o
_bss            ends

; ===========================================================================

; Segment type: Zero-length
_prgend         segment byte public '' use64
_end            label byte
_prgend         ends

; ===========================================================================

; Segment type: Externs
; extern
; int printf(const char *format, ...)
                extrn printf:near       ; DATA XREF: .got.plt:off_601018↑o
; int __cdecl _libc_start_main(int (__cdecl *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)
                extrn __libc_start_main:near
                                        ; DATA XREF: .got.plt:off_601020↑o
                extrn __gmon_start__ ; weak
                                        ; DATA XREF: .got:__gmon_start___ptr↑o
                                        ; .got.plt:off_601028↑o


                end _start
