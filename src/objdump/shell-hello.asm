; ---------------------------------------------------------------------------

Elf64_Sym       struc ; (sizeof=0x18, align=0x8, mappedto_1)
                                        ; XREF: LOAD:00000000000002D0/r
                                        ; LOAD:00000000000002E8/r ...
st_name         dd ?                    ; offset (000005A0)
st_info         db ?
st_other        db ?
st_shndx        dw ?
st_value        dq ?                    ; offset (00000000)
st_size         dq ?
Elf64_Sym       ends

; ---------------------------------------------------------------------------

Elf64_Rela      struc ; (sizeof=0x18, align=0x8, copyof_2)
                                        ; XREF: LOAD:0000000000000788/r
                                        ; LOAD:00000000000007A0/r ...
r_offset        dq ?
r_info          dq ?
r_addend        dq ?
Elf64_Rela      ends

; ---------------------------------------------------------------------------

Elf64_Dyn       struc ; (sizeof=0x10, align=0x8, copyof_3)
                                        ; XREF: LOAD:stru_201D30/r
                                        ; LOAD:0000000000201D40/r ...
d_tag           dq ?
d_un            dq ?
Elf64_Dyn       ends

; ---------------------------------------------------------------------------

Elf64_Verneed   struc ; (sizeof=0x10, align=0x4, mappedto_4)
                                        ; XREF: LOAD:0000000000000738/r
vn_version      dw ?
vn_cnt          dw ?
vn_file         dd ?                    ; offset (000005A0)
vn_aux          dd ?
vn_next         dd ?
Elf64_Verneed   ends

; ---------------------------------------------------------------------------

Elf64_Vernaux   struc ; (sizeof=0x10, align=0x4, mappedto_5)
                                        ; XREF: LOAD:0000000000000748/r
                                        ; LOAD:0000000000000758/r ...
vna_hash        dd ?
vna_flags       dw ?
vna_other       dw ?
vna_name        dd ?                    ; offset (000005A0)
vna_next        dd ?
Elf64_Vernaux   ends

; ---------------------------------------------------------------------------

stat            struc ; (sizeof=0x90, align=0x8, copyof_6)
                                        ; XREF: sub_F26/r
st_dev          dq ?                    ; XREF: sub_F26+6F/r
st_ino          dq ?                    ; XREF: sub_F26+61/r
st_nlink        dq ?
st_mode         dd ?
st_uid          dd ?                    ; XREF: sub_F26+88/r
st_gid          dd ?                    ; XREF: sub_F26+94/r
__pad0          dd ?
st_rdev         dq ?                    ; XREF: sub_F26+7D/r
st_size         dq ?                    ; XREF: sub_F26+9D/r
st_blksize      dq ?
st_blocks       dq ?
st_atim         timespec ?
st_mtim         timespec ?              ; XREF: sub_F26+A8/r
st_ctim         timespec ?              ; XREF: sub_F26+B3/r
__unused        dq 3 dup(?)
stat            ends

; ---------------------------------------------------------------------------

timespec        struc ; (sizeof=0x10, align=0x8, copyof_16)
                                        ; XREF: stat/r stat/r ...
tv_sec          dq ?                    ; XREF: sub_F26+A8/r
                                        ; sub_F26+B3/r
tv_nsec         dq ?
timespec        ends


;
; +-------------------------------------------------------------------------+
; |   This file has been generated by The Interactive Disassembler (IDA)    |
; |           Copyright (c) 2018 Hex-Rays, <support@hex-rays.com>           |
; |                      License info: 48-B51B-7454-28                      |
; |            University of Virginia / Dpt of Computer Science             |
; +-------------------------------------------------------------------------+
;
; Input SHA256 : 5C4182D3B57492B8E1AFB161EADAE27E5F53BF2127E98C47DCC5FC9015BF2EFF
; Input MD5    : 02C20FC9EE0208EA68494F3D75669B75
; Input CRC32  : F27A179B

; File Name   : /u/zy8ez/zoya/Binaries/shell-hello
; Format      : ELF64 for x86-64 (Shared object)
; Interpreter '/lib64/ld-linux-x86-64.so.2'
; Needed Library 'libc.so.6'
;

                .686p
                .mmx
                .model flat
.intel_syntax noprefix

; ===========================================================================

; Segment type: Pure code
; Segment permissions: Read/Execute
LOAD            segment byte public 'CODE' use64
                assume cs:LOAD
                assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
dword_0         dd 464C457Fh            ; DATA XREF: LOAD:00000000000002E8↓o
                                        ; LOAD:0000000000000300↓o ...
                                        ; File format: \x7FELF
                db 2                    ; File class: 64-bit
                db 1                    ; Data encoding: little-endian
                db 1                    ; File version
                db 0                    ; OS/ABI: UNIX System V ABI
                db 0                    ; ABI Version
                db 7 dup(0)             ; Padding
                dw 3                    ; File type: Shared object
                dw 3Eh                  ; Machine: x86-64
                dd 1                    ; File version
                dq offset start         ; Entry point
                dq 40h                  ; PHT file offset
                dq 23B0h                ; SHT file offset
                dd 0                    ; Processor-specific flags
                dw 40h                  ; ELF header size
                dw 38h                  ; PHT entry size
                dw 9                    ; Number of entries in PHT
                dw 40h                  ; SHT entry size
                dw 1Bh                  ; Number of entries in SHT
                dw 1Ah                  ; SHT entry index for string table
; ELF64 Program Header
; PHT Entry 0
dword_40        dd 6                    ; DATA XREF: LOAD:0000000000000050↓o
                                        ; Type: PHDR
                dd 4                    ; Flags
                dq 40h                  ; File offset
                dq offset dword_40      ; Virtual address
                dq 40h                  ; Physical address
                dq 1F8h                 ; Size in file image
                dq 1F8h                 ; Size in memory image
                dq 8                    ; Alignment
; PHT Entry 1
                dd 3                    ; Type: INTERP
                dd 4                    ; Flags
                dq 238h                 ; File offset
                dq offset aLib64LdLinuxX8 ; Virtual address
                dq 238h                 ; Physical address
                dq 1Ch                  ; Size in file image
                dq 1Ch                  ; Size in memory image
                dq 1                    ; Alignment
; PHT Entry 2
                dd 1                    ; Type: LOAD
                dd 5                    ; Flags
                dq 0                    ; File offset
                dq 0                    ; Virtual address
                dq 0                    ; Physical address
                dq 1A98h                ; Size in file image
                dq 1A98h                ; Size in memory image
                dq 200000h              ; Alignment
; PHT Entry 3
                dd 1                    ; Type: LOAD
                dd 6                    ; Flags
                dq 1D20h                ; File offset
                dq offset off_201D20    ; Virtual address
                dq 201D20h              ; Physical address
                dq 578h                 ; Size in file image
                dq 6C8h                 ; Size in memory image
                dq 200000h              ; Alignment
; PHT Entry 4
                dd 2                    ; Type: DYNAMIC
                dd 6                    ; Flags
                dq 1D30h                ; File offset
                dq offset stru_201D30   ; Virtual address
                dq 201D30h              ; Physical address
                dq 1F0h                 ; Size in file image
                dq 1F0h                 ; Size in memory image
                dq 8                    ; Alignment
; PHT Entry 5
                dd 4                    ; Type: NOTE
                dd 4                    ; Flags
                dq 254h                 ; File offset
                dq offset dword_254     ; Virtual address
                dq 254h                 ; Physical address
                dq 44h                  ; Size in file image
                dq 44h                  ; Size in memory image
                dq 4                    ; Alignment
; PHT Entry 6
                dd 6474E550h            ; Type: EH_FRAME
                dd 4                    ; Flags
                dq 1810h                ; File offset
                dq offset unk_1810      ; Virtual address
                dq 1810h                ; Physical address
                dq 7Ch                  ; Size in file image
                dq 7Ch                  ; Size in memory image
                dq 4                    ; Alignment
; PHT Entry 7
                dd 6474E551h            ; Type: STACK
                dd 6                    ; Flags
                dq 0                    ; File offset
                dq 0                    ; Virtual address
                dq 0                    ; Physical address
                dq 0                    ; Size in file image
                dq 0                    ; Size in memory image
                dq 10h                  ; Alignment
; PHT Entry 8
                dd 6474E552h            ; Type: RO-AFTER
                dd 4                    ; Flags
                dq 1D20h                ; File offset
                dq offset off_201D20    ; Virtual address
                dq 201D20h              ; Physical address
                dq 2E0h                 ; Size in file image
                dq 2E0h                 ; Size in memory image
                dq 1                    ; Alignment
aLib64LdLinuxX8 db '/lib64/ld-linux-x86-64.so.2',0
                                        ; DATA XREF: LOAD:0000000000000088↑o
dword_254       dd 4                    ; DATA XREF: LOAD:0000000000000168↑o
                dq 100000010h, 554E47h, 200000003h, 400000000h, 300000014h
                dq 0F722C08100554E47h, 4B80531830E0A94Ah, 1D7134BE852C3Dh
; ELF GNU Hash Table
elf_gnu_hash_nbuckets dd 3
elf_gnu_hash_symbias dd 1Ah
elf_gnu_hash_bitmask_nwords dd 1
elf_gnu_hash_shift dd 6
elf_gnu_hash_indexes dq 24000C000000130h
elf_gnu_hash_bucket dd 1Ah, 1Ch, 0
elf_gnu_hash_chain dd 900589C4h, 6BA3DDA7h, 409CB9C4h, 1C8BF239h, 0
; ELF Symbol Table
                Elf64_Sym <0>
                Elf64_Sym <offset aGetenv - offset byte_5A0, 12h, 0, 0, \ ; "getenv"
                           offset dword_0, 0>
                Elf64_Sym <offset aErrnoLocation - offset byte_5A0, 12h, 0, 0, \ ; "__errno_location"
                           offset dword_0, 0>
                Elf64_Sym <offset aItmDeregistert - offset byte_5A0, 20h, 0, 0, \ ; "_ITM_deregisterTMCloneTable"
                           offset dword_0, 0>
                Elf64_Sym <offset aGetpid - offset byte_5A0, 12h, 0, 0, \ ; "getpid"
                           offset dword_0, 0>
                Elf64_Sym <offset aStrlen - offset byte_5A0, 12h, 0, 0, \ ; "strlen"
                           offset dword_0, 0>
                Elf64_Sym <offset aStackChkFail - offset byte_5A0, 12h, 0, 0, \ ; "__stack_chk_fail"
                           offset dword_0, 0>
                Elf64_Sym <offset aMemset - offset byte_5A0, 12h, 0, 0, \ ; "memset"
                           offset dword_0, 0>
                Elf64_Sym <offset aLibcStartMain - offset byte_5A0, 12h, 0, 0, \ ; "__libc_start_main"
                           offset dword_0, 0>
                Elf64_Sym <offset aMemcmp - offset byte_5A0, 12h, 0, 0, \ ; "memcmp"
                           offset dword_0, 0>
                Elf64_Sym <offset aCalloc - offset byte_5A0, 12h, 0, 0, \ ; "calloc"
                           offset dword_0, 0>
                Elf64_Sym <offset aPutenv - offset byte_5A0, 12h, 0, 0, \ ; "putenv"
                           offset dword_0, 0>
                Elf64_Sym <offset aAtoll - offset byte_5A0, 12h, 0, 0, offset dword_0,\ ; "atoll"
                           0>
                Elf64_Sym <offset aFprintf - offset byte_5A0, 12h, 0, 0, \ ; "fprintf"
                           offset dword_0, 0>
                Elf64_Sym <offset aGmonStart - offset byte_5A0, 20h, 0, 0, \ ; "__gmon_start__"
                           offset dword_0, 0>
                Elf64_Sym <offset aMemcpy - offset byte_5A0, 12h, 0, 0, \ ; "memcpy"
                           offset dword_0, 0>
                Elf64_Sym <offset aTime - offset byte_5A0, 12h, 0, 0, offset dword_0, \ ; "time"
                           0>
                Elf64_Sym <offset aXstat - offset byte_5A0, 12h, 0, 0, offset dword_0,\ ; "__xstat"
                           0>
                Elf64_Sym <offset aMalloc - offset byte_5A0, 12h, 0, 0, \ ; "malloc"
                           offset dword_0, 0>
                Elf64_Sym <offset aIsoc99Sscanf - offset byte_5A0, 12h, 0, 0, \ ; "__isoc99_sscanf"
                           offset dword_0, 0>
                Elf64_Sym <offset aExecvp - offset byte_5A0, 12h, 0, 0, \ ; "execvp"
                           offset dword_0, 0>
                Elf64_Sym <offset aSprintf - offset byte_5A0, 12h, 0, 0, \ ; "sprintf"
                           offset dword_0, 0>
                Elf64_Sym <offset aItmRegistertmc - offset byte_5A0, 20h, 0, 0, \ ; "_ITM_registerTMCloneTable"
                           offset dword_0, 0>
                Elf64_Sym <offset aStrdup - offset byte_5A0, 12h, 0, 0, \ ; "strdup"
                           offset dword_0, 0>
                Elf64_Sym <offset aStrerror - offset byte_5A0, 12h, 0, 0, \ ; "strerror"
                           offset dword_0, 0>
                Elf64_Sym <offset aCxaFinalize - offset byte_5A0, 22h, 0, 0, \ ; "__cxa_finalize"
                           offset dword_0, 0>
                Elf64_Sym <offset aEnviron+1 - offset byte_5A0, 21h, 0, 18h, \ ; "_environ"
                           offset environ, 8>
                Elf64_Sym <offset aEnviron+2 - offset byte_5A0, 21h, 0, 18h, \ ; "environ"
                           offset environ, 8>
                Elf64_Sym <offset aEnviron - offset byte_5A0, 11h, 0, 18h, \ ; "__environ"
                           offset environ, 8>
                Elf64_Sym <offset aStderr - offset byte_5A0, 11h, 0, 18h, \ ; "stderr"
                           offset stderr, 8>
; ELF String Table
byte_5A0        db 0                    ; DATA XREF: LOAD:00000000000002E8↑o
                                        ; LOAD:0000000000000300↑o ...
aLibcSo6        db 'libc.so.6',0        ; DATA XREF: LOAD:0000000000000738↓o
aSprintf        db 'sprintf',0          ; DATA XREF: LOAD:00000000000004C8↑o
aIsoc99Sscanf   db '__isoc99_sscanf',0  ; DATA XREF: LOAD:0000000000000498↑o
aTime           db 'time',0             ; DATA XREF: LOAD:0000000000000450↑o
aStackChkFail   db '__stack_chk_fail',0 ; DATA XREF: LOAD:0000000000000360↑o
aGetpid         db 'getpid',0           ; DATA XREF: LOAD:0000000000000330↑o
aStrdup         db 'strdup',0           ; DATA XREF: LOAD:00000000000004F8↑o
aCalloc         db 'calloc',0           ; DATA XREF: LOAD:00000000000003C0↑o
aStrlen         db 'strlen',0           ; DATA XREF: LOAD:0000000000000348↑o
aMemset         db 'memset',0           ; DATA XREF: LOAD:0000000000000378↑o
aErrnoLocation  db '__errno_location',0 ; DATA XREF: LOAD:0000000000000300↑o
aMemcmp         db 'memcmp',0           ; DATA XREF: LOAD:00000000000003A8↑o
aPutenv         db 'putenv',0           ; DATA XREF: LOAD:00000000000003D8↑o
aMemcpy         db 'memcpy',0           ; DATA XREF: LOAD:0000000000000438↑o
aMalloc         db 'malloc',0           ; DATA XREF: LOAD:0000000000000480↑o
aGetenv         db 'getenv',0           ; DATA XREF: LOAD:00000000000002E8↑o
aStderr         db 'stderr',0           ; DATA XREF: LOAD:0000000000000588↑o
aExecvp         db 'execvp',0           ; DATA XREF: LOAD:00000000000004B0↑o
aFprintf        db 'fprintf',0          ; DATA XREF: LOAD:0000000000000408↑o
aCxaFinalize    db '__cxa_finalize',0   ; DATA XREF: LOAD:0000000000000528↑o
aAtoll          db 'atoll',0            ; DATA XREF: LOAD:00000000000003F0↑o
aStrerror       db 'strerror',0         ; DATA XREF: LOAD:0000000000000510↑o
aLibcStartMain  db '__libc_start_main',0
                                        ; DATA XREF: LOAD:0000000000000390↑o
aEnviron        db '__environ',0        ; DATA XREF: LOAD:0000000000000570↑o
                                        ; LOAD:0000000000000540↑o ...
aXstat          db '__xstat',0          ; DATA XREF: LOAD:0000000000000468↑o
aGlibc27        db 'GLIBC_2.7',0        ; DATA XREF: LOAD:0000000000000748↓o
aGlibc214       db 'GLIBC_2.14',0       ; DATA XREF: LOAD:0000000000000758↓o
aGlibc24        db 'GLIBC_2.4',0        ; DATA XREF: LOAD:0000000000000768↓o
aGlibc225       db 'GLIBC_2.2.5',0      ; DATA XREF: LOAD:0000000000000778↓o
aItmDeregistert db '_ITM_deregisterTMCloneTable',0
                                        ; DATA XREF: LOAD:0000000000000318↑o
aGmonStart      db '__gmon_start__',0   ; DATA XREF: LOAD:0000000000000420↑o
aItmRegistertmc db '_ITM_registerTMCloneTable',0
                                        ; DATA XREF: LOAD:00000000000004E0↑o
; ELF GNU Symbol Version Table
                dw 0
                dw 2                    ; getenv@@GLIBC_2.2.5
                dw 2                    ; __errno_location@@GLIBC_2.2.5
                dw 0                    ; local  symbol: _ITM_deregisterTMCloneTable
                dw 2                    ; getpid@@GLIBC_2.2.5
                dw 2                    ; strlen@@GLIBC_2.2.5
                dw 3                    ; __stack_chk_fail@@GLIBC_2.4
                dw 2                    ; memset@@GLIBC_2.2.5
                dw 2                    ; __libc_start_main@@GLIBC_2.2.5
                dw 2                    ; memcmp@@GLIBC_2.2.5
                dw 2                    ; calloc@@GLIBC_2.2.5
                dw 2                    ; putenv@@GLIBC_2.2.5
                dw 2                    ; atoll@@GLIBC_2.2.5
                dw 2                    ; fprintf@@GLIBC_2.2.5
                dw 0                    ; local  symbol: __gmon_start__
                dw 4                    ; memcpy@@GLIBC_2.14
                dw 2                    ; time@@GLIBC_2.2.5
                dw 2                    ; __xstat@@GLIBC_2.2.5
                dw 2                    ; malloc@@GLIBC_2.2.5
                dw 5                    ; __isoc99_sscanf@@GLIBC_2.7
                dw 2                    ; execvp@@GLIBC_2.2.5
                dw 2                    ; sprintf@@GLIBC_2.2.5
                dw 0                    ; local  symbol: _ITM_registerTMCloneTable
                dw 2                    ; strdup@@GLIBC_2.2.5
                dw 2                    ; strerror@@GLIBC_2.2.5
                dw 2                    ; __cxa_finalize@@GLIBC_2.2.5
                dw 2                    ; _environ@@GLIBC_2.2.5
                dw 2                    ; environ@@GLIBC_2.2.5
                dw 2                    ; __environ@@GLIBC_2.2.5
                dw 2                    ; stderr@@GLIBC_2.2.5
                dw 0
                dw 0
; ELF GNU Symbol Version Requirements
                Elf64_Verneed <1, 4, offset aLibcSo6 - offset byte_5A0, 10h, 0> ; "libc.so.6"
                Elf64_Vernaux <0D696917h, 0, 5, offset aGlibc27 - offset byte_5A0, \ ; "GLIBC_2.7"
                               10h>
                Elf64_Vernaux <6969194h, 0, 4, offset aGlibc214 - offset byte_5A0, \ ; "GLIBC_2.14"
                               10h>
                Elf64_Vernaux <0D696914h, 0, 3, offset aGlibc24 - offset byte_5A0, \ ; "GLIBC_2.4"
                               10h>
                Elf64_Vernaux <9691A75h, 0, 2, offset aGlibc225 - offset byte_5A0, 0> ; "GLIBC_2.2.5"
; ELF RELA Relocation Table
                Elf64_Rela <201D20h, 8, 0CD0h> ; R_X86_64_RELATIVE +0CD0h
                Elf64_Rela <201D28h, 8, 0C90h> ; R_X86_64_RELATIVE +0C90h
                Elf64_Rela <202008h, 8, 202008h> ; R_X86_64_RELATIVE +202008h
                Elf64_Rela <201FD8h, 300000006h, 0> ; R_X86_64_GLOB_DAT _ITM_deregisterTMCloneTable
                Elf64_Rela <201FE0h, 800000006h, 0> ; R_X86_64_GLOB_DAT __libc_start_main
                Elf64_Rela <201FE8h, 0E00000006h, 0> ; R_X86_64_GLOB_DAT __gmon_start__
                Elf64_Rela <201FF0h, 1600000006h, 0> ; R_X86_64_GLOB_DAT _ITM_registerTMCloneTable
                Elf64_Rela <201FF8h, 1900000006h, 0> ; R_X86_64_GLOB_DAT __cxa_finalize
                Elf64_Rela <2022A0h, 1C00000005h, 0> ; R_X86_64_COPY __environ
                Elf64_Rela <2022C0h, 1D00000005h, 0> ; R_X86_64_COPY stderr
; ELF JMPREL Relocation Table
                Elf64_Rela <201F38h, 100000007h, 0> ; R_X86_64_JUMP_SLOT getenv
                Elf64_Rela <201F40h, 200000007h, 0> ; R_X86_64_JUMP_SLOT __errno_location
                Elf64_Rela <201F48h, 400000007h, 0> ; R_X86_64_JUMP_SLOT getpid
                Elf64_Rela <201F50h, 500000007h, 0> ; R_X86_64_JUMP_SLOT strlen
                Elf64_Rela <201F58h, 600000007h, 0> ; R_X86_64_JUMP_SLOT __stack_chk_fail
                Elf64_Rela <201F60h, 700000007h, 0> ; R_X86_64_JUMP_SLOT memset
                Elf64_Rela <201F68h, 900000007h, 0> ; R_X86_64_JUMP_SLOT memcmp
                Elf64_Rela <201F70h, 0A00000007h, 0> ; R_X86_64_JUMP_SLOT calloc
                Elf64_Rela <201F78h, 0B00000007h, 0> ; R_X86_64_JUMP_SLOT putenv
                Elf64_Rela <201F80h, 0C00000007h, 0> ; R_X86_64_JUMP_SLOT atoll
                Elf64_Rela <201F88h, 0D00000007h, 0> ; R_X86_64_JUMP_SLOT fprintf
                Elf64_Rela <201F90h, 0F00000007h, 0> ; R_X86_64_JUMP_SLOT memcpy
                Elf64_Rela <201F98h, 1000000007h, 0> ; R_X86_64_JUMP_SLOT time
                Elf64_Rela <201FA0h, 1100000007h, 0> ; R_X86_64_JUMP_SLOT __xstat
                Elf64_Rela <201FA8h, 1200000007h, 0> ; R_X86_64_JUMP_SLOT malloc
                Elf64_Rela <201FB0h, 1300000007h, 0> ; R_X86_64_JUMP_SLOT __isoc99_sscanf
                Elf64_Rela <201FB8h, 1400000007h, 0> ; R_X86_64_JUMP_SLOT execvp
                Elf64_Rela <201FC0h, 1500000007h, 0> ; R_X86_64_JUMP_SLOT sprintf
                Elf64_Rela <201FC8h, 1700000007h, 0> ; R_X86_64_JUMP_SLOT strdup
                Elf64_Rela <201FD0h, 1800000007h, 0> ; R_X86_64_JUMP_SLOT strerror
LOAD            ends

; ===========================================================================

; Segment type: Pure code
; Segment permissions: Read/Execute
_init           segment dword public 'CODE' use64
                assume cs:_init
                ;org 0A58h
                assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B R O U T I N E =======================================


                public _init_proc
_init_proc      proc near               ; CODE XREF: init+2C↓p
                sub     rsp, 8
                mov     rax, cs:__gmon_start___ptr
                test    rax, rax
                jz      short loc_A6A
                call    rax ; __gmon_start__

loc_A6A:                                ; CODE XREF: _init_proc+E↑j
                add     rsp, 8
                retn
_init_proc      endp

_init           ends

; ===========================================================================

; Segment type: Pure code
; Segment permissions: Read/Execute
LOAD            segment byte public 'CODE' use64
                assume cs:LOAD
                ;org 0A6Fh
                assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                align 10h
LOAD            ends

; ===========================================================================

; Segment type: Pure code
; Segment permissions: Read/Execute
_plt            segment para public 'CODE' use64
                assume cs:_plt
                ;org 0A70h
                assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B R O U T I N E =======================================


sub_A70         proc near               ; CODE XREF: .plt:0000000000000A8B↓j
                                        ; .plt:0000000000000A9B↓j ...
; __unwind {
                push    cs:qword_201F28
                jmp     cs:qword_201F30
sub_A70         endp

; ---------------------------------------------------------------------------
                align 20h
; [00000006 BYTES: COLLAPSED FUNCTION _getenv. PRESS NUMPAD+ TO EXPAND]
; ---------------------------------------------------------------------------
                push    0
                jmp     sub_A70
; [00000006 BYTES: COLLAPSED FUNCTION ___errno_location. PRESS NUMPAD+ TO EXPAND]
; ---------------------------------------------------------------------------
                push    1
                jmp     sub_A70
; [00000006 BYTES: COLLAPSED FUNCTION _getpid. PRESS NUMPAD+ TO EXPAND]
; ---------------------------------------------------------------------------
                push    2
                jmp     sub_A70
; [00000006 BYTES: COLLAPSED FUNCTION _strlen. PRESS NUMPAD+ TO EXPAND]
; ---------------------------------------------------------------------------
                push    3
                jmp     sub_A70
; [00000006 BYTES: COLLAPSED FUNCTION ___stack_chk_fail. PRESS NUMPAD+ TO EXPAND]
; ---------------------------------------------------------------------------
                push    4
                jmp     sub_A70
; [00000006 BYTES: COLLAPSED FUNCTION _memset. PRESS NUMPAD+ TO EXPAND]
; ---------------------------------------------------------------------------
                push    5
                jmp     sub_A70
; [00000006 BYTES: COLLAPSED FUNCTION _memcmp. PRESS NUMPAD+ TO EXPAND]
; ---------------------------------------------------------------------------
                push    6
                jmp     sub_A70
; [00000006 BYTES: COLLAPSED FUNCTION _calloc. PRESS NUMPAD+ TO EXPAND]
; ---------------------------------------------------------------------------
                push    7
                jmp     sub_A70
; [00000006 BYTES: COLLAPSED FUNCTION _putenv. PRESS NUMPAD+ TO EXPAND]
; ---------------------------------------------------------------------------
                push    8
                jmp     sub_A70
; [00000006 BYTES: COLLAPSED FUNCTION _atoll. PRESS NUMPAD+ TO EXPAND]
; ---------------------------------------------------------------------------
                push    9
                jmp     sub_A70
; [00000006 BYTES: COLLAPSED FUNCTION _fprintf. PRESS NUMPAD+ TO EXPAND]
; ---------------------------------------------------------------------------
                push    0Ah
                jmp     sub_A70
; [00000006 BYTES: COLLAPSED FUNCTION _memcpy. PRESS NUMPAD+ TO EXPAND]
; ---------------------------------------------------------------------------
                push    0Bh
                jmp     sub_A70
; [00000006 BYTES: COLLAPSED FUNCTION _time. PRESS NUMPAD+ TO EXPAND]
; ---------------------------------------------------------------------------
                push    0Ch
                jmp     sub_A70
; [00000006 BYTES: COLLAPSED FUNCTION ___xstat. PRESS NUMPAD+ TO EXPAND]
; ---------------------------------------------------------------------------
                push    0Dh
                jmp     sub_A70
; [00000006 BYTES: COLLAPSED FUNCTION _malloc. PRESS NUMPAD+ TO EXPAND]
; ---------------------------------------------------------------------------
                push    0Eh
                jmp     sub_A70
; [00000006 BYTES: COLLAPSED FUNCTION ___isoc99_sscanf. PRESS NUMPAD+ TO EXPAND]
; ---------------------------------------------------------------------------
                push    0Fh
                jmp     sub_A70
; [00000006 BYTES: COLLAPSED FUNCTION _execvp. PRESS NUMPAD+ TO EXPAND]
; ---------------------------------------------------------------------------
                push    10h
                jmp     sub_A70
; [00000006 BYTES: COLLAPSED FUNCTION _sprintf. PRESS NUMPAD+ TO EXPAND]
; ---------------------------------------------------------------------------
                push    11h
                jmp     sub_A70
; [00000006 BYTES: COLLAPSED FUNCTION _strdup. PRESS NUMPAD+ TO EXPAND]
; ---------------------------------------------------------------------------
                push    12h
                jmp     sub_A70
; [00000006 BYTES: COLLAPSED FUNCTION _strerror. PRESS NUMPAD+ TO EXPAND]
; ---------------------------------------------------------------------------
                push    13h
                jmp     sub_A70
; } // starts at A70
_plt            ends

; ===========================================================================

; Segment type: Pure code
; Segment permissions: Read/Execute
; Segment alignment 'qword' can not be represented in assembly
_plt_got        segment para public 'CODE' use64
                assume cs:_plt_got
                ;org 0BC0h
                assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
; [00000006 BYTES: COLLAPSED FUNCTION __cxa_finalize. PRESS NUMPAD+ TO EXPAND]
                align 8
; } // starts at BC0
_plt_got        ends

; ===========================================================================

; Segment type: Pure code
; Segment permissions: Read/Execute
LOAD            segment byte public 'CODE' use64
                assume cs:LOAD
                ;org 0BC8h
                assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                align 10h
LOAD            ends

; ===========================================================================

; Segment type: Pure code
; Segment permissions: Read/Execute
_text           segment para public 'CODE' use64
                assume cs:_text
                ;org 0BD0h
                assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B R O U T I N E =======================================

; Attributes: noreturn fuzzy-sp

                public start
start           proc near               ; DATA XREF: LOAD:0000000000000018↑o
; __unwind {
                xor     ebp, ebp
                mov     r9, rdx         ; rtld_fini
                pop     rsi             ; argc
                mov     rdx, rsp        ; ubp_av
                and     rsp, 0FFFFFFFFFFFFFFF0h
                push    rax
                push    rsp             ; stack_end
                lea     r8, fini        ; fini
                lea     rcx, init       ; init
                lea     rdi, main       ; main
                call    cs:__libc_start_main_ptr
                hlt
; } // starts at BD0
start           endp

; ---------------------------------------------------------------------------
                align 20h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_C00         proc near               ; CODE XREF: sub_C90:loc_CB3↓p
                lea     rdi, unk_202298
                push    rbp
                lea     rax, unk_202298
                cmp     rax, rdi
                mov     rbp, rsp
                jz      short loc_C30
                mov     rax, cs:_ITM_deregisterTMCloneTable_ptr
                test    rax, rax
                jz      short loc_C30
                pop     rbp
                jmp     rax
; ---------------------------------------------------------------------------
                align 10h

loc_C30:                                ; CODE XREF: sub_C00+15↑j
                                        ; sub_C00+21↑j
                pop     rbp
                retn
sub_C00         endp

; ---------------------------------------------------------------------------
                align 20h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_C40         proc near               ; CODE XREF: sub_CD0+5↓j
                lea     rdi, unk_202298
                lea     rsi, unk_202298
                push    rbp
                sub     rsi, rdi
                mov     rbp, rsp
                sar     rsi, 3
                mov     rax, rsi
                shr     rax, 3Fh
                add     rsi, rax
                sar     rsi, 1
                jz      short loc_C80
                mov     rax, cs:_ITM_registerTMCloneTable_ptr
                test    rax, rax
                jz      short loc_C80
                pop     rbp
                jmp     rax
; ---------------------------------------------------------------------------
                align 20h

loc_C80:                                ; CODE XREF: sub_C40+26↑j
                                        ; sub_C40+32↑j
                pop     rbp
                retn
sub_C40         endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================


sub_C90         proc near               ; DATA XREF: .fini_array:off_201D28↓o
                cmp     cs:byte_2022C8, 0
                jnz     short locret_CC8
                cmp     cs:__cxa_finalize_ptr, 0
                push    rbp
                mov     rbp, rsp
                jz      short loc_CB3
                mov     rdi, cs:off_202008
                call    __cxa_finalize

loc_CB3:                                ; CODE XREF: sub_C90+15↑j
                call    sub_C00
                mov     cs:byte_2022C8, 1
                pop     rbp
                retn
; ---------------------------------------------------------------------------
                align 8

locret_CC8:                             ; CODE XREF: sub_C90+7↑j
                rep retn
sub_C90         endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_CD0         proc near               ; DATA XREF: .init_array:off_201D20↓o
                push    rbp
                mov     rbp, rsp
                pop     rbp
                jmp     sub_C40
sub_CD0         endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_CDA         proc near               ; CODE XREF: sub_1216+1B↓p
; __unwind {
                push    rbp
                mov     rbp, rsp
                mov     cs:byte_2023E2, 0
                movzx   eax, cs:byte_2023E2
                mov     cs:byte_2023E1, al
                movzx   eax, cs:byte_2023E1
                mov     cs:byte_2023E0, al

loc_CFF:                                ; CODE XREF: sub_CDA+5C↓j
                movzx   eax, cs:byte_2023E0
                movzx   eax, al
                movzx   ecx, cs:byte_2023E0
                movsxd  rdx, eax
                lea     rax, unk_2022E0
                mov     [rdx+rax], cl
                movzx   eax, cs:byte_2023E0
                add     eax, 1
                mov     cs:byte_2023E0, al
                movzx   eax, cs:byte_2023E0
                test    al, al
                jnz     short loc_CFF
                nop
                pop     rbp
                retn
; } // starts at CDA
sub_CDA         endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_D3B         proc near               ; CODE XREF: sub_F26+CD↓p
                                        ; sub_1216+2C↓p ...

var_1C          = dword ptr -1Ch
var_18          = qword ptr -18h
var_9           = byte ptr -9
var_8           = qword ptr -8

; __unwind {
                push    rbp
                mov     rbp, rsp
                mov     [rbp+var_18], rdi
                mov     [rbp+var_1C], esi
                mov     rax, [rbp+var_18]
                mov     [rbp+var_8], rax
                jmp     loc_E25
; ---------------------------------------------------------------------------

loc_D53:                                ; CODE XREF: sub_D3B+D5↓j
                                        ; sub_D3B+EE↓j
                movzx   eax, cs:byte_2023E0
                movzx   eax, al
                movsxd  rdx, eax
                lea     rax, unk_2022E0
                movzx   eax, byte ptr [rdx+rax]
                mov     [rbp+var_9], al
                movzx   edx, cs:byte_2023E2
                movzx   eax, [rbp+var_9]
                add     eax, edx
                mov     cs:byte_2023E2, al
                movzx   eax, cs:byte_2023E0
                movzx   eax, al
                cdq
                idiv    [rbp+var_1C]
                mov     eax, edx
                movsxd  rdx, eax
                mov     rax, [rbp+var_8]
                add     rax, rdx
                movzx   edx, byte ptr [rax]
                movzx   eax, cs:byte_2023E2
                add     eax, edx
                mov     cs:byte_2023E2, al
                movzx   eax, cs:byte_2023E2
                movzx   eax, al
                movzx   edx, cs:byte_2023E0
                movzx   esi, dl
                movsxd  rdx, eax
                lea     rax, unk_2022E0
                movzx   ecx, byte ptr [rdx+rax]
                movsxd  rdx, esi
                lea     rax, unk_2022E0
                mov     [rdx+rax], cl
                movzx   eax, cs:byte_2023E2
                movzx   eax, al
                movsxd  rdx, eax
                lea     rax, unk_2022E0
                movzx   ecx, [rbp+var_9]
                mov     [rdx+rax], cl
                movzx   eax, cs:byte_2023E0
                add     eax, 1
                mov     cs:byte_2023E0, al
                movzx   eax, cs:byte_2023E0
                test    al, al
                jnz     loc_D53
                add     [rbp+var_8], 100h
                sub     [rbp+var_1C], 100h

loc_E25:                                ; CODE XREF: sub_D3B+13↑j
                cmp     [rbp+var_1C], 0
                jg      loc_D53
                nop
                pop     rbp
                retn
; } // starts at D3B
sub_D3B         endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_E32         proc near               ; CODE XREF: sub_1216+3D↓p
                                        ; sub_1216+4E↓p ...

var_1C          = dword ptr -1Ch
var_18          = qword ptr -18h
var_9           = byte ptr -9
var_8           = qword ptr -8

; __unwind {
                push    rbp
                mov     rbp, rsp
                mov     [rbp+var_18], rdi
                mov     [rbp+var_1C], esi
                mov     rax, [rbp+var_18]
                mov     [rbp+var_8], rax
                jmp     loc_F19
; ---------------------------------------------------------------------------

loc_E4A:                                ; CODE XREF: sub_E32+EB↓j
                movzx   eax, cs:byte_2023E0
                add     eax, 1
                mov     cs:byte_2023E0, al
                movzx   eax, cs:byte_2023E0
                movzx   eax, al
                movsxd  rdx, eax
                lea     rax, unk_2022E0
                movzx   eax, byte ptr [rdx+rax]
                mov     [rbp+var_9], al
                movzx   edx, cs:byte_2023E1
                movzx   eax, [rbp+var_9]
                add     eax, edx
                mov     cs:byte_2023E1, al
                movzx   eax, cs:byte_2023E1
                movzx   eax, al
                movzx   edx, cs:byte_2023E0
                movzx   esi, dl
                movsxd  rdx, eax
                lea     rax, unk_2022E0
                movzx   ecx, byte ptr [rdx+rax]
                movsxd  rdx, esi
                lea     rax, unk_2022E0
                mov     [rdx+rax], cl
                movzx   eax, cs:byte_2023E1
                movzx   eax, al
                movsxd  rdx, eax
                lea     rax, unk_2022E0
                movzx   ecx, [rbp+var_9]
                mov     [rdx+rax], cl
                movzx   eax, cs:byte_2023E0
                movzx   eax, al
                movsxd  rdx, eax
                lea     rax, unk_2022E0
                movzx   eax, byte ptr [rdx+rax]
                add     [rbp+var_9], al
                mov     rax, [rbp+var_8]
                movzx   ecx, byte ptr [rax]
                movzx   eax, [rbp+var_9]
                movsxd  rdx, eax
                lea     rax, unk_2022E0
                movzx   eax, byte ptr [rdx+rax]
                xor     ecx, eax
                mov     edx, ecx
                mov     rax, [rbp+var_8]
                mov     [rax], dl
                add     [rbp+var_8], 1
                sub     [rbp+var_1C], 1

loc_F19:                                ; CODE XREF: sub_E32+13↑j
                cmp     [rbp+var_1C], 0
                jg      loc_E4A
                nop
                pop     rbp
                retn
; } // starts at E32
sub_E32         endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_F26         proc near               ; CODE XREF: sub_1216+1AE↓p

filename        = qword ptr -138h
stat_buf        = stat ptr -130h
s               = qword ptr -0A0h
var_98          = qword ptr -98h
var_84          = dword ptr -84h
var_80          = dword ptr -80h
var_78          = qword ptr -78h
var_70          = qword ptr -70h
var_48          = qword ptr -48h
var_38          = qword ptr -38h
var_8           = qword ptr -8

; __unwind {
                push    rbp
                mov     rbp, rsp
                sub     rsp, 140h
                mov     [rbp+filename], rdi
                mov     rax, fs:28h
                mov     [rbp+var_8], rax
                xor     eax, eax
                lea     rdx, [rbp+stat_buf]
                mov     rax, [rbp+filename]
                mov     rsi, rdx        ; stat_buf
                mov     rdi, rax        ; filename
                call    sub_17C0
                test    eax, eax
                jns     short loc_F6E
                mov     eax, 0FFFFFFFFh
                jmp     loc_FFD
; ---------------------------------------------------------------------------

loc_F6E:                                ; CODE XREF: sub_F26+3C↑j
                lea     rax, [rbp+s]
                mov     edx, 90h        ; n
                mov     esi, 0          ; c
                mov     rdi, rax        ; s
                call    _memset
                mov     rax, [rbp+stat_buf.st_ino]
                mov     [rbp+var_98], rax
                mov     rax, [rbp+stat_buf.st_dev]
                mov     [rbp+s], rax
                mov     rax, [rbp+stat_buf.st_rdev]
                mov     [rbp+var_78], rax
                mov     eax, [rbp+stat_buf.st_uid]
                mov     [rbp+var_84], eax
                mov     eax, [rbp+stat_buf.st_gid]
                mov     [rbp+var_80], eax
                mov     rax, [rbp+stat_buf.st_size]
                mov     [rbp+var_70], rax
                mov     rax, [rbp+stat_buf.st_mtim.tv_sec]
                mov     [rbp+var_48], rax
                mov     rax, [rbp+stat_buf.st_ctim.tv_sec]
                mov     [rbp+var_38], rax
                lea     rax, [rbp+s]
                mov     esi, 90h
                mov     rdi, rax
                call    sub_D3B
                mov     eax, 0

loc_FFD:                                ; CODE XREF: sub_F26+43↑j
                mov     rcx, [rbp+var_8]
                xor     rcx, fs:28h
                jz      short locret_1011
                call    ___stack_chk_fail
; ---------------------------------------------------------------------------

locret_1011:                            ; CODE XREF: sub_F26+E4↑j
                leave
                retn
; } // starts at F26
sub_F26         endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_1013        proc near               ; CODE XREF: sub_1072+16F↓p

var_10          = qword ptr -10h
var_8           = qword ptr -8

; __unwind {
                push    rbp
                mov     rbp, rsp
                mov     [rbp+var_8], rdi
                mov     [rbp+var_10], rsi
                jmp     short loc_1026
; ---------------------------------------------------------------------------

loc_1021:                               ; CODE XREF: sub_1013+31↓j
                add     [rbp+var_8], 8

loc_1026:                               ; CODE XREF: sub_1013+C↑j
                cmp     [rbp+var_8], 0
                jz      short loc_105C
                mov     rax, [rbp+var_8]
                mov     rax, [rax]
                test    rax, rax
                jz      short loc_105C
                mov     rax, [rbp+var_8]
                mov     rax, [rax]
                cmp     [rbp+var_10], rax
                jnz     short loc_1021
                jmp     short loc_105C
; ---------------------------------------------------------------------------

loc_1048:                               ; CODE XREF: sub_1013+5A↓j
                mov     rax, [rbp+var_8]
                mov     rdx, [rax+8]
                mov     rax, [rbp+var_8]
                mov     [rax], rdx
                add     [rbp+var_8], 8

loc_105C:                               ; CODE XREF: sub_1013+18↑j
                                        ; sub_1013+24↑j ...
                cmp     [rbp+var_8], 0
                jz      short loc_106F
                mov     rax, [rbp+var_8]
                mov     rax, [rax]
                test    rax, rax
                jnz     short loc_1048

loc_106F:                               ; CODE XREF: sub_1013+4E↑j
                nop
                pop     rbp
                retn
; } // starts at 1013
sub_1013        endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_1072        proc near               ; CODE XREF: sub_1216+12C↓p
                                        ; DATA XREF: sub_1072+20↓o

var_244         = dword ptr -244h
var_234         = dword ptr -234h
var_230         = dword ptr -230h
var_22C         = dword ptr -22Ch
var_228         = qword ptr -228h
var_220         = qword ptr -220h
var_218         = qword ptr -218h
s               = byte ptr -210h
var_8           = qword ptr -8

; __unwind {
                push    rbp
                mov     rbp, rsp
                sub     rsp, 250h
                mov     [rbp+var_244], edi
                mov     rax, fs:28h
                mov     [rbp+var_8], rax
                xor     eax, eax
                lea     rax, sub_1072
                mov     [rbp+var_220], rax
                call    _getpid
                cdqe
                mov     rdx, [rbp+var_220]
                not     rdx
                imul    rax, rdx
                xor     [rbp+var_220], rax
                mov     rdx, [rbp+var_220]
                lea     rax, [rbp+s]
                lea     rsi, format     ; "x%lx"
                mov     rdi, rax        ; s
                mov     eax, 0
                call    _sprintf
                lea     rax, [rbp+s]
                mov     rdi, rax        ; name
                call    _getenv
                mov     [rbp+var_218], rax
                lea     rax, [rbp+s]
                mov     rdi, rax        ; s
                call    _strlen
                mov     [rbp+var_230], eax
                cmp     [rbp+var_218], 0
                jnz     short loc_116A
                lea     rdx, [rbp+s]
                mov     eax, [rbp+var_230]
                cdqe
                lea     rdi, [rdx+rax]  ; s
                mov     edx, [rbp+var_244]
                mov     rax, [rbp+var_220]
                mov     ecx, edx
                mov     rdx, rax
                lea     rsi, aLuD       ; "=%lu %d"
                mov     eax, 0
                call    _sprintf
                lea     rax, [rbp+s]
                mov     rdi, rax        ; s
                call    _strdup
                mov     rdi, rax        ; string
                call    _putenv
                mov     eax, 0
                jmp     loc_1200
; ---------------------------------------------------------------------------

loc_116A:                               ; CODE XREF: sub_1072+9F↑j
                lea     rsi, [rbp+s]
                lea     rcx, [rbp+var_234]
                lea     rdx, [rbp+var_228]
                mov     rax, [rbp+var_218]
                mov     r8, rsi
                lea     rsi, aLuDC      ; "%lu %d%c"
                mov     rdi, rax
                mov     eax, 0
                call    ___isoc99_sscanf
                mov     [rbp+var_22C], eax
                cmp     [rbp+var_22C], 2
                jnz     short loc_11FB
                mov     rax, [rbp+var_228]
                cmp     [rbp+var_220], rax
                jnz     short loc_11FB
                mov     eax, [rbp+var_230]
                neg     eax
                cdqe
                lea     rdx, [rax-1]
                mov     rax, [rbp+var_218]
                add     rdx, rax
                mov     rax, cs:environ
                mov     rsi, rdx
                mov     rdi, rax
                call    sub_1013
                mov     eax, [rbp+var_234]
                mov     edx, [rbp+var_244]
                sub     edx, eax
                mov     eax, edx
                add     eax, 1
                jmp     short loc_1200
; ---------------------------------------------------------------------------

loc_11FB:                               ; CODE XREF: sub_1072+138↑j
                                        ; sub_1072+148↑j
                mov     eax, 0FFFFFFFFh

loc_1200:                               ; CODE XREF: sub_1072+F3↑j
                                        ; sub_1072+187↑j
                mov     rcx, [rbp+var_8]
                xor     rcx, fs:28h
                jz      short locret_1214
                call    ___stack_chk_fail
; ---------------------------------------------------------------------------

locret_1214:                            ; CODE XREF: sub_1072+19B↑j
                leave
                retn
; } // starts at 1072
sub_1072        endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_1216        proc near               ; CODE XREF: main+26↓p

var_50          = qword ptr -50h
var_44          = dword ptr -44h
var_34          = dword ptr -34h
var_30          = dword ptr -30h
var_2C          = dword ptr -2Ch
s               = qword ptr -28h
var_20          = qword ptr -20h
argv            = qword ptr -18h

; __unwind {
                push    rbp
                mov     rbp, rsp
                push    rbx
                sub     rsp, 48h
                mov     [rbp+var_44], edi
                mov     [rbp+var_50], rsi
                mov     rax, [rbp+var_50]
                mov     rax, [rax]
                mov     [rbp+var_20], rax
                call    sub_CDA
                mov     esi, 100h
                lea     rdi, unk_202079
                call    sub_D3B
                mov     esi, 2Ah ; '*'
                lea     rdi, unk_2021DC
                call    sub_E32
                mov     esi, 1
                lea     rdi, nptr
                call    sub_E32
                movzx   eax, cs:nptr
                test    al, al
                jz      short loc_129E
                lea     rdi, nptr       ; nptr
                call    _atoll
                mov     rbx, rax
                mov     edi, 0          ; timer
                call    _time
                cmp     rbx, rax
                jge     short loc_129E
                lea     rax, unk_2021DC
                jmp     loc_1667
; ---------------------------------------------------------------------------

loc_129E:                               ; CODE XREF: sub_1216+5C↑j
                                        ; sub_1216+7A↑j
                mov     esi, 0Ah
                lea     rdi, file       ; "\b"
                call    sub_E32
                mov     esi, 3
                lea     rdi, byte_202249
                call    sub_E32
                mov     esi, 0Fh
                lea     rdi, byte_20224F
                call    sub_E32
                mov     esi, 1
                lea     rdi, byte_202260
                call    sub_E32
                mov     esi, 16h
                lea     rdi, unk_202264
                call    sub_E32
                mov     esi, 16h
                lea     rdi, unk_202264
                call    sub_D3B
                mov     esi, 16h
                lea     rdi, unk_202281
                call    sub_E32
                mov     edx, 16h        ; n
                lea     rsi, unk_202281 ; s2
                lea     rdi, unk_202264 ; s1
                call    _memcmp
                test    eax, eax
                jz      short loc_133D
                lea     rax, unk_202264
                jmp     loc_1667
; ---------------------------------------------------------------------------

loc_133D:                               ; CODE XREF: sub_1216+119↑j
                mov     eax, [rbp+var_44]
                mov     edi, eax
                call    sub_1072
                mov     [rbp+var_2C], eax
                mov     esi, 13h
                lea     rdi, unk_2021C2
                call    sub_E32
                cmp     [rbp+var_2C], 0
                jns     short loc_136D
                lea     rax, unk_2021C2
                jmp     loc_1667
; ---------------------------------------------------------------------------

loc_136D:                               ; CODE XREF: sub_1216+149↑j
                mov     eax, [rbp+var_44]
                add     eax, 0Ah
                cdqe
                mov     esi, 8          ; size
                mov     rdi, rax        ; nmemb
                call    _calloc
                mov     [rbp+argv], rax
                cmp     [rbp+argv], 0
                jnz     short loc_1397
                mov     eax, 0
                jmp     loc_1667
; ---------------------------------------------------------------------------

loc_1397:                               ; CODE XREF: sub_1216+175↑j
                cmp     [rbp+var_2C], 0
                jz      loc_14AB
                mov     esi, 1
                lea     rdi, byte_2021D7
                call    sub_E32
                movzx   eax, cs:byte_2021D7
                test    al, al
                jnz     short loc_13D9
                lea     rdi, file       ; "\b"
                call    sub_F26
                test    eax, eax
                jz      short loc_13D9
                lea     rax, file       ; "\b"
                jmp     loc_1667
; ---------------------------------------------------------------------------

loc_13D9:                               ; CODE XREF: sub_1216+1A5↑j
                                        ; sub_1216+1B5↑j
                mov     esi, 1
                lea     rdi, byte_202208
                call    sub_E32
                mov     esi, 22h ; '"'
                lea     rdi, unk_202211
                call    sub_E32
                mov     esi, 13h
                lea     rdi, unk_2021A8
                call    sub_E32
                mov     esi, 13h
                lea     rdi, unk_2021A8
                call    sub_D3B
                mov     esi, 13h
                lea     rdi, unk_202024
                call    sub_E32
                mov     edx, 13h        ; n
                lea     rsi, unk_202024 ; s2
                lea     rdi, unk_2021A8 ; s1
                call    _memcmp
                test    eax, eax
                jz      short loc_1456
                lea     rax, unk_2021A8
                jmp     loc_1667
; ---------------------------------------------------------------------------

loc_1456:                               ; CODE XREF: sub_1216+232↑j
                mov     edi, 1022h      ; size
                call    _malloc
                mov     [rbp+s], rax
                cmp     [rbp+s], 0
                jnz     short loc_1475
                mov     eax, 0
                jmp     loc_1667
; ---------------------------------------------------------------------------

loc_1475:                               ; CODE XREF: sub_1216+253↑j
                mov     rax, [rbp+s]
                mov     edx, 1000h      ; n
                mov     esi, 20h ; ' '  ; c
                mov     rdi, rax        ; s
                call    _memset
                mov     rax, [rbp+s]
                add     rax, 1000h
                mov     edx, 22h ; '"'  ; n
                lea     rsi, unk_202211 ; src
                mov     rdi, rax        ; dest
                call    _memcpy
                jmp     short loc_14FB
; ---------------------------------------------------------------------------

loc_14AB:                               ; CODE XREF: sub_1216+185↑j
                movzx   eax, cs:byte_20224F
                test    al, al
                jz      short loc_14F3
                mov     edi, 200h       ; size
                call    _malloc
                mov     [rbp+s], rax
                cmp     [rbp+s], 0
                jnz     short loc_14D5
                mov     eax, 0
                jmp     loc_1667
; ---------------------------------------------------------------------------

loc_14D5:                               ; CODE XREF: sub_1216+2B3↑j
                mov     rdx, [rbp+var_20]
                mov     rax, [rbp+s]
                lea     rsi, byte_20224F ; format
                mov     rdi, rax        ; s
                mov     eax, 0
                call    _sprintf
                jmp     short loc_14FB
; ---------------------------------------------------------------------------

loc_14F3:                               ; CODE XREF: sub_1216+29E↑j
                mov     rax, [rbp+var_20]
                mov     [rbp+s], rax

loc_14FB:                               ; CODE XREF: sub_1216+293↑j
                                        ; sub_1216+2DB↑j
                mov     [rbp+var_30], 0
                mov     eax, [rbp+var_30]
                lea     edx, [rax+1]
                mov     [rbp+var_30], edx
                cdqe
                lea     rdx, ds:0[rax*8]
                mov     rax, [rbp+argv]
                add     rdx, rax
                mov     rax, [rbp+var_50]
                mov     rax, [rax]
                mov     [rdx], rax
                cmp     [rbp+var_2C], 0
                jz      short loc_155B
                movzx   eax, cs:byte_202208
                test    al, al
                jz      short loc_155B
                mov     eax, [rbp+var_30]
                lea     edx, [rax+1]
                mov     [rbp+var_30], edx
                cdqe
                lea     rdx, ds:0[rax*8]
                mov     rax, [rbp+argv]
                add     rdx, rax
                lea     rax, byte_202208
                mov     [rdx], rax

loc_155B:                               ; CODE XREF: sub_1216+314↑j
                                        ; sub_1216+31F↑j
                movzx   eax, cs:byte_202249
                test    al, al
                jz      short loc_158A
                mov     eax, [rbp+var_30]
                lea     edx, [rax+1]
                mov     [rbp+var_30], edx
                cdqe
                lea     rdx, ds:0[rax*8]
                mov     rax, [rbp+argv]
                add     rdx, rax
                lea     rax, byte_202249
                mov     [rdx], rax

loc_158A:                               ; CODE XREF: sub_1216+34E↑j
                mov     eax, [rbp+var_30]
                lea     edx, [rax+1]
                mov     [rbp+var_30], edx
                cdqe
                lea     rdx, ds:0[rax*8]
                mov     rax, [rbp+argv]
                add     rdx, rax
                mov     rax, [rbp+s]
                mov     [rdx], rax
                movzx   eax, cs:byte_202260
                test    al, al
                jz      short loc_15DA
                mov     eax, [rbp+var_30]
                lea     edx, [rax+1]
                mov     [rbp+var_30], edx
                cdqe
                lea     rdx, ds:0[rax*8]
                mov     rax, [rbp+argv]
                add     rdx, rax
                lea     rax, byte_202260
                mov     [rdx], rax

loc_15DA:                               ; CODE XREF: sub_1216+39E↑j
                cmp     [rbp+var_2C], 1
                jle     short loc_15E5
                mov     eax, [rbp+var_2C]
                jmp     short loc_15EA
; ---------------------------------------------------------------------------

loc_15E5:                               ; CODE XREF: sub_1216+3C8↑j
                mov     eax, 0

loc_15EA:                               ; CODE XREF: sub_1216+3CD↑j
                mov     [rbp+var_34], eax
                jmp     short loc_162A
; ---------------------------------------------------------------------------

loc_15EF:                               ; CODE XREF: sub_1216+41A↓j
                mov     eax, [rbp+var_34]
                lea     edx, [rax+1]
                mov     [rbp+var_34], edx
                cdqe
                lea     rdx, ds:0[rax*8]
                mov     rax, [rbp+var_50]
                lea     rcx, [rdx+rax]
                mov     eax, [rbp+var_30]
                lea     edx, [rax+1]
                mov     [rbp+var_30], edx
                cdqe
                lea     rdx, ds:0[rax*8]
                mov     rax, [rbp+argv]
                add     rdx, rax
                mov     rax, [rcx]
                mov     [rdx], rax

loc_162A:                               ; CODE XREF: sub_1216+3D7↑j
                mov     eax, [rbp+var_34]
                cmp     eax, [rbp+var_44]
                jl      short loc_15EF
                mov     eax, [rbp+var_30]
                cdqe
                lea     rdx, ds:0[rax*8]
                mov     rax, [rbp+argv]
                add     rax, rdx
                mov     qword ptr [rax], 0
                mov     rax, [rbp+argv]
                mov     rsi, rax        ; argv
                lea     rdi, file       ; "\b"
                call    _execvp
                lea     rax, file       ; "\b"

loc_1667:                               ; CODE XREF: sub_1216+83↑j
                                        ; sub_1216+122↑j ...
                add     rsp, 48h
                pop     rbx
                pop     rbp
                retn
; } // starts at 1216
sub_1216        endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; int __cdecl main(int, char **, char **)
main            proc near               ; DATA XREF: start+1D↑o

var_20          = qword ptr -20h
var_14          = dword ptr -14h

; __unwind {
                push    rbp
                mov     rbp, rsp
                push    r12
                push    rbx
                sub     rsp, 10h
                mov     [rbp+var_14], edi
                mov     [rbp+var_20], rsi
                mov     rax, [rbp+var_20]
                lea     rbx, [rax+8]
                mov     rdx, [rbp+var_20]
                mov     eax, [rbp+var_14]
                mov     rsi, rdx
                mov     edi, eax
                call    sub_1216
                mov     [rbx], rax
                mov     rax, [rbp+var_20]
                add     rax, 8
                mov     rax, [rax]
                test    rax, rax
                jz      short loc_16B6
                mov     rax, [rbp+var_20]
                mov     rbx, [rax+8]
                jmp     short loc_16BD
; ---------------------------------------------------------------------------

loc_16B6:                               ; CODE XREF: main+3C↑j
                lea     rbx, aNull      ; "<null>"

loc_16BD:                               ; CODE XREF: main+46↑j
                call    ___errno_location
                mov     eax, [rax]
                test    eax, eax
                jz      short loc_16DB
                call    ___errno_location
                mov     eax, [rax]
                mov     edi, eax        ; errnum
                call    _strerror
                mov     r12, rax
                jmp     short loc_16E2
; ---------------------------------------------------------------------------

loc_16DB:                               ; CODE XREF: main+58↑j
                lea     r12, unk_17FD

loc_16E2:                               ; CODE XREF: main+6B↑j
                call    ___errno_location
                mov     eax, [rax]
                test    eax, eax
                jz      short loc_16F6
                lea     rax, asc_17FE   ; ": "
                jmp     short loc_16FD
; ---------------------------------------------------------------------------

loc_16F6:                               ; CODE XREF: main+7D↑j
                lea     rax, unk_17FD

loc_16FD:                               ; CODE XREF: main+86↑j
                mov     rdx, [rbp+var_20]
                mov     rdx, [rdx]
                mov     rdi, cs:stderr  ; stream
                mov     r9, rbx
                mov     r8, r12
                mov     rcx, rax
                lea     rsi, aSSSS      ; "%s%s%s: %s\n"
                mov     eax, 0
                call    _fprintf
                mov     eax, 1
                add     rsp, 10h
                pop     rbx
                pop     r12
                pop     rbp
                retn
; } // starts at 166E
main            endp

; ---------------------------------------------------------------------------
                align 20h

; =============== S U B R O U T I N E =======================================


; void init(void)
init            proc near               ; DATA XREF: start+16↑o
; __unwind {
                push    r15
                push    r14
                mov     r15, rdx
                push    r13
                push    r12
                lea     r12, off_201D20
                push    rbp
                lea     rbp, off_201D28
                push    rbx
                mov     r13d, edi
                mov     r14, rsi
                sub     rbp, r12
                sub     rsp, 8
                sar     rbp, 3
                call    _init_proc
                test    rbp, rbp
                jz      short loc_1796
                xor     ebx, ebx
                nop     dword ptr [rax+rax+00000000h]

loc_1780:                               ; CODE XREF: init+54↓j
                mov     rdx, r15
                mov     rsi, r14
                mov     edi, r13d
                call    qword ptr [r12+rbx*8]
                add     rbx, 1
                cmp     rbp, rbx
                jnz     short loc_1780

loc_1796:                               ; CODE XREF: init+34↑j
                add     rsp, 8
                pop     rbx
                pop     rbp
                pop     r12
                pop     r13
                pop     r14
                pop     r15
                retn
; } // starts at 1740
init            endp

; ---------------------------------------------------------------------------
                align 10h
; [00000002 BYTES: COLLAPSED FUNCTION fini. PRESS NUMPAD+ TO EXPAND]
                align 20h

; =============== S U B R O U T I N E =======================================


; __int64 __fastcall sub_17C0(char *filename, struct stat *stat_buf)
sub_17C0        proc near               ; CODE XREF: sub_F26+35↑p
; __unwind {
                mov     rdx, rsi        ; stat_buf
                mov     rsi, rdi        ; filename
                mov     edi, 1          ; ver
                jmp     ___xstat
; } // starts at 17C0
sub_17C0        endp

_text           ends

; ===========================================================================

; Segment type: Pure code
; Segment permissions: Read/Execute
_fini           segment dword public 'CODE' use64
                assume cs:_fini
                ;org 17D0h
                assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B R O U T I N E =======================================


                public _term_proc
_term_proc      proc near
                sub     rsp, 8
                add     rsp, 8
                retn
_term_proc      endp

_fini           ends

; ===========================================================================

; Segment type: Pure code
; Segment permissions: Read/Execute
LOAD            segment byte public 'CODE' use64
                assume cs:LOAD
                ;org 17D9h
                assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                align 4
LOAD            ends

; ===========================================================================

; Segment type: Pure data
; Segment permissions: Read
_rodata         segment dword public 'CONST' use64
                assume cs:_rodata
                ;org 17DCh
                db    1
                db    0
                db    2
                db    0
; char format[]
format          db 'x%lx',0             ; DATA XREF: sub_1072+58↑o
; char aLuD[]
aLuD            db '=%lu %d',0          ; DATA XREF: sub_1072+C6↑o
aLuDC           db '%lu %d%c',0         ; DATA XREF: sub_1072+117↑o
aNull           db '<null>',0           ; DATA XREF: main:loc_16B6↑o
unk_17FD        db    0                 ; DATA XREF: main:loc_16DB↑o
                                        ; main:loc_16F6↑o
asc_17FE        db ': ',0               ; DATA XREF: main+7F↑o
; char aSSSS[]
aSSSS           db '%s%s%s: %s',0Ah,0   ; DATA XREF: main+A6↑o
_rodata         ends

; ===========================================================================

; Segment type: Pure code
; Segment permissions: Read/Execute
LOAD            segment byte public 'CODE' use64
                assume cs:LOAD
                ;org 180Dh
                assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                align 10h
LOAD            ends

; ===========================================================================

; Segment type: Pure data
; Segment permissions: Read
_eh_frame_hdr   segment dword public 'CONST' use64
                assume cs:_eh_frame_hdr
                ;org 1810h
unk_1810        db    1                 ; DATA XREF: LOAD:00000000000001A0↑o
                db  1Bh
                db    3
                db  3Bh ; ;
                db  7Ch ; |
                db    0
                db    0
                db    0
                db  0Eh
                db    0
                db    0
                db    0
                db  60h ; `
                db 0F2h
                db 0FFh
                db 0FFh
                db 0C8h
                db    0
                db    0
                db    0
                db 0B0h
                db 0F3h
                db 0FFh
                db 0FFh
                db 0F0h
                db    0
                db    0
                db    0
                db 0C0h
                db 0F3h
                db 0FFh
                db 0FFh
                db  98h
                db    0
                db    0
                db    0
                db 0CAh
                db 0F4h
                db 0FFh
                db 0FFh
                db    8
                db    1
                db    0
                db    0
                db  2Bh ; +
                db 0F5h
                db 0FFh
                db 0FFh
                db  28h ; (
                db    1
                db    0
                db    0
                db  22h ; "
                db 0F6h
                db 0FFh
                db 0FFh
                db  48h ; H
                db    1
                db    0
                db    0
                db  16h
                db 0F7h
                db 0FFh
                db 0FFh
                db  68h ; h
                db    1
                db    0
                db    0
                db    3
                db 0F8h
                db 0FFh
                db 0FFh
                db  88h
                db    1
                db    0
                db    0
                db  62h ; b
                db 0F8h
                db 0FFh
                db 0FFh
                db 0A8h
                db    1
                db    0
                db    0
                db    6
                db 0FAh
                db 0FFh
                db 0FFh
                db 0C8h
                db    1
                db    0
                db    0
                db  5Eh ; ^
                db 0FEh
                db 0FFh
                db 0FFh
                db 0ECh
                db    1
                db    0
                db    0
                db  30h ; 0
                db 0FFh
                db 0FFh
                db 0FFh
                db  10h
                db    2
                db    0
                db    0
                db 0A0h
                db 0FFh
                db 0FFh
                db 0FFh
                db  58h ; X
                db    2
                db    0
                db    0
                db 0B0h
                db 0FFh
                db 0FFh
                db 0FFh
                db  70h ; p
                db    2
                db    0
                db    0
_eh_frame_hdr   ends

; ===========================================================================

; Segment type: Pure code
; Segment permissions: Read/Execute
LOAD            segment byte public 'CODE' use64
                assume cs:LOAD
                ;org 188Ch
                assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                align 10h
LOAD            ends

; ===========================================================================

; Segment type: Pure data
; Segment permissions: Read
; Segment alignment 'qword' can not be represented in assembly
_eh_frame       segment para public 'CONST' use64
                assume cs:_eh_frame
                ;org 1890h
                db  14h
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    1
                db  7Ah ; z
                db  52h ; R
                db    0
                db    1
                db  78h ; x
                db  10h
                db    1
                db  1Bh
                db  0Ch
                db    7
                db    8
                db  90h
                db    1
                db    7
                db  10h
                db  14h
                db    0
                db    0
                db    0
                db  1Ch
                db    0
                db    0
                db    0
                db  20h
                db 0F3h
                db 0FFh
                db 0FFh
                db  2Bh ; +
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db  14h
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    1
                db  7Ah ; z
                db  52h ; R
                db    0
                db    1
                db  78h ; x
                db  10h
                db    1
                db  1Bh
                db  0Ch
                db    7
                db    8
                db  90h
                db    1
                db    0
                db    0
                db  24h ; $
                db    0
                db    0
                db    0
                db  1Ch
                db    0
                db    0
                db    0
                db  90h
                db 0F1h
                db 0FFh
                db 0FFh
                db  50h ; P
                db    1
                db    0
                db    0
                db    0
                db  0Eh
                db  10h
                db  46h ; F
                db  0Eh
                db  18h
                db  4Ah ; J
                db  0Fh
                db  0Bh
                db  77h ; w
                db    8
                db  80h
                db    0
                db  3Fh ; ?
                db  1Ah
                db  3Bh ; ;
                db  2Ah ; *
                db  33h ; 3
                db  24h ; $
                db  22h ; "
                db    0
                db    0
                db    0
                db    0
                db  14h
                db    0
                db    0
                db    0
                db  44h ; D
                db    0
                db    0
                db    0
                db 0B8h
                db 0F2h
                db 0FFh
                db 0FFh
                db    8
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db  1Ch
                db    0
                db    0
                db    0
                db  5Ch ; \
                db    0
                db    0
                db    0
                db 0BAh
                db 0F3h
                db 0FFh
                db 0FFh
                db  61h ; a
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db  10h
                db  86h
                db    2
                db  43h ; C
                db  0Dh
                db    6
                db    2
                db  5Ch ; \
                db  0Ch
                db    7
                db    8
                db    0
                db    0
                db  1Ch
                db    0
                db    0
                db    0
                db  7Ch ; |
                db    0
                db    0
                db    0
                db 0FBh
                db 0F3h
                db 0FFh
                db 0FFh
                db 0F7h
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db  10h
                db  86h
                db    2
                db  43h ; C
                db  0Dh
                db    6
                db    2
                db 0F2h
                db  0Ch
                db    7
                db    8
                db    0
                db    0
                db  1Ch
                db    0
                db    0
                db    0
                db  9Ch
                db    0
                db    0
                db    0
                db 0D2h
                db 0F4h
                db 0FFh
                db 0FFh
                db 0F4h
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db  10h
                db  86h
                db    2
                db  43h ; C
                db  0Dh
                db    6
                db    2
                db 0EFh
                db  0Ch
                db    7
                db    8
                db    0
                db    0
                db  1Ch
                db    0
                db    0
                db    0
                db 0BCh
                db    0
                db    0
                db    0
                db 0A6h
                db 0F5h
                db 0FFh
                db 0FFh
                db 0EDh
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db  10h
                db  86h
                db    2
                db  43h ; C
                db  0Dh
                db    6
                db    2
                db 0E8h
                db  0Ch
                db    7
                db    8
                db    0
                db    0
                db  1Ch
                db    0
                db    0
                db    0
                db 0DCh
                db    0
                db    0
                db    0
                db  73h ; s
                db 0F6h
                db 0FFh
                db 0FFh
                db  5Fh ; _
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db  10h
                db  86h
                db    2
                db  43h ; C
                db  0Dh
                db    6
                db    2
                db  5Ah ; Z
                db  0Ch
                db    7
                db    8
                db    0
                db    0
                db  1Ch
                db    0
                db    0
                db    0
                db 0FCh
                db    0
                db    0
                db    0
                db 0B2h
                db 0F6h
                db 0FFh
                db 0FFh
                db 0A4h
                db    1
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db  10h
                db  86h
                db    2
                db  43h ; C
                db  0Dh
                db    6
                db    3
                db  9Fh
                db    1
                db  0Ch
                db    7
                db    8
                db    0
                db  20h
                db    0
                db    0
                db    0
                db  1Ch
                db    1
                db    0
                db    0
                db  36h ; 6
                db 0F8h
                db 0FFh
                db 0FFh
                db  58h ; X
                db    4
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db  10h
                db  86h
                db    2
                db  43h ; C
                db  0Dh
                db    6
                db  45h ; E
                db  83h
                db    3
                db    3
                db  4Eh ; N
                db    4
                db  0Ch
                db    7
                db    8
                db    0
                db    0
                db  20h
                db    0
                db    0
                db    0
                db  40h ; @
                db    1
                db    0
                db    0
                db  6Ah ; j
                db 0FCh
                db 0FFh
                db 0FFh
                db 0C5h
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db  10h
                db  86h
                db    2
                db  43h ; C
                db  0Dh
                db    6
                db  47h ; G
                db  8Ch
                db    3
                db  83h
                db    4
                db    2
                db 0B9h
                db  0Ch
                db    7
                db    8
                db    0
                db  44h ; D
                db    0
                db    0
                db    0
                db  64h ; d
                db    1
                db    0
                db    0
                db  18h
                db 0FDh
                db 0FFh
                db 0FFh
                db  65h ; e
                db    0
                db    0
                db    0
                db    0
                db  42h ; B
                db  0Eh
                db  10h
                db  8Fh
                db    2
                db  42h ; B
                db  0Eh
                db  18h
                db  8Eh
                db    3
                db  45h ; E
                db  0Eh
                db  20h
                db  8Dh
                db    4
                db  42h ; B
                db  0Eh
                db  28h ; (
                db  8Ch
                db    5
                db  48h ; H
                db  0Eh
                db  30h ; 0
                db  86h
                db    6
                db  48h ; H
                db  0Eh
                db  38h ; 8
                db  83h
                db    7
                db  4Dh ; M
                db  0Eh
                db  40h ; @
                db  72h ; r
                db  0Eh
                db  38h ; 8
                db  41h ; A
                db  0Eh
                db  30h ; 0
                db  41h ; A
                db  0Eh
                db  28h ; (
                db  42h ; B
                db  0Eh
                db  20h
                db  42h ; B
                db  0Eh
                db  18h
                db  42h ; B
                db  0Eh
                db  10h
                db  42h ; B
                db  0Eh
                db    8
                db    0
                db  14h
                db    0
                db    0
                db    0
                db 0ACh
                db    1
                db    0
                db    0
                db  40h ; @
                db 0FDh
                db 0FFh
                db 0FFh
                db    2
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db  10h
                db    0
                db    0
                db    0
                db 0C4h
                db    1
                db    0
                db    0
                db  38h ; 8
                db 0FDh
                db 0FFh
                db 0FFh
                db  10h
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
_eh_frame       ends

; ELF Initialization Function Table
; ===========================================================================

; Segment type: Pure data
; Segment permissions: Read/Write
; Segment alignment 'qword' can not be represented in assembly
_init_array     segment para public 'DATA' use64
                assume cs:_init_array
                ;org 201D20h
off_201D20      dq offset sub_CD0       ; DATA XREF: LOAD:00000000000000F8↑o
                                        ; LOAD:0000000000000210↑o ...
_init_array     ends

; ELF Termination Function Table
; ===========================================================================

; Segment type: Pure data
; Segment permissions: Read/Write
; Segment alignment 'qword' can not be represented in assembly
_fini_array     segment para public 'DATA' use64
                assume cs:_fini_array
                ;org 201D28h
off_201D28      dq offset sub_C90       ; DATA XREF: init+13↑o
_fini_array     ends

; ELF Dynamic Information
; ===========================================================================

; Segment type: Pure data
; Segment permissions: Read/Write
LOAD            segment byte public 'DATA' use64
                assume cs:LOAD
                ;org 201D30h
stru_201D30     Elf64_Dyn <1, 1>        ; DATA XREF: LOAD:0000000000000130↑o
                                        ; .got:0000000000201F20↓o
                                        ; DT_NEEDED libc.so.6
                Elf64_Dyn <0Ch, 0A58h>  ; DT_INIT
                Elf64_Dyn <0Dh, 17D0h>  ; DT_FINI
                Elf64_Dyn <19h, 201D20h> ; DT_INIT_ARRAY
                Elf64_Dyn <1Bh, 8>      ; DT_INIT_ARRAYSZ
                Elf64_Dyn <1Ah, 201D28h> ; DT_FINI_ARRAY
                Elf64_Dyn <1Ch, 8>      ; DT_FINI_ARRAYSZ
                Elf64_Dyn <6FFFFEF5h, 298h> ; DT_GNU_HASH
                Elf64_Dyn <5, 5A0h>     ; DT_STRTAB
                Elf64_Dyn <6, 2D0h>     ; DT_SYMTAB
                Elf64_Dyn <0Ah, 158h>   ; DT_STRSZ
                Elf64_Dyn <0Bh, 18h>    ; DT_SYMENT
                Elf64_Dyn <15h, 0>      ; DT_DEBUG
                Elf64_Dyn <3, 201F20h>  ; DT_PLTGOT
                Elf64_Dyn <2, 1E0h>     ; DT_PLTRELSZ
                Elf64_Dyn <14h, 7>      ; DT_PLTREL
                Elf64_Dyn <17h, 878h>   ; DT_JMPREL
                Elf64_Dyn <7, 788h>     ; DT_RELA
                Elf64_Dyn <8, 0F0h>     ; DT_RELASZ
                Elf64_Dyn <9, 18h>      ; DT_RELAENT
                Elf64_Dyn <1Eh, 8>      ; DT_FLAGS
                Elf64_Dyn <6FFFFFFBh, 8000001h> ; DT_FLAGS_1
                Elf64_Dyn <6FFFFFFEh, 738h> ; DT_VERNEED
                Elf64_Dyn <6FFFFFFFh, 1> ; DT_VERNEEDNUM
                Elf64_Dyn <6FFFFFF0h, 6F8h> ; DT_VERSYM
                Elf64_Dyn <6FFFFFF9h, 3> ; DT_RELACOUNT
                Elf64_Dyn <0>           ; DT_NULL
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
LOAD            ends

; ===========================================================================

; Segment type: Pure data
; Segment permissions: Read/Write
; Segment alignment 'qword' can not be represented in assembly
_got            segment para public 'DATA' use64
                assume cs:_got
                ;org 201F20h
                dq offset stru_201D30
qword_201F28    dq 0                    ; DATA XREF: sub_A70↑r
qword_201F30    dq 0                    ; DATA XREF: sub_A70+6↑r
getenv_ptr      dq offset getenv        ; DATA XREF: _getenv↑r
__errno_location_ptr dq offset __errno_location
                                        ; DATA XREF: ___errno_location↑r
getpid_ptr      dq offset getpid        ; DATA XREF: _getpid↑r
strlen_ptr      dq offset strlen        ; DATA XREF: _strlen↑r
__stack_chk_fail_ptr dq offset __stack_chk_fail
                                        ; DATA XREF: ___stack_chk_fail↑r
memset_ptr      dq offset memset        ; DATA XREF: _memset↑r
memcmp_ptr      dq offset memcmp        ; DATA XREF: _memcmp↑r
calloc_ptr      dq offset calloc        ; DATA XREF: _calloc↑r
putenv_ptr      dq offset putenv        ; DATA XREF: _putenv↑r
atoll_ptr       dq offset atoll         ; DATA XREF: _atoll↑r
fprintf_ptr     dq offset fprintf       ; DATA XREF: _fprintf↑r
memcpy_ptr      dq offset memcpy        ; DATA XREF: _memcpy↑r
time_ptr        dq offset time          ; DATA XREF: _time↑r
__xstat_ptr     dq offset __xstat       ; DATA XREF: ___xstat↑r
malloc_ptr      dq offset malloc        ; DATA XREF: _malloc↑r
__isoc99_sscanf_ptr dq offset __isoc99_sscanf
                                        ; DATA XREF: ___isoc99_sscanf↑r
execvp_ptr      dq offset execvp        ; DATA XREF: _execvp↑r
sprintf_ptr     dq offset sprintf       ; DATA XREF: _sprintf↑r
strdup_ptr      dq offset strdup        ; DATA XREF: _strdup↑r
strerror_ptr    dq offset strerror      ; DATA XREF: _strerror↑r
_ITM_deregisterTMCloneTable_ptr dq offset _ITM_deregisterTMCloneTable
                                        ; DATA XREF: sub_C00+17↑r
__libc_start_main_ptr dq offset __libc_start_main
                                        ; DATA XREF: start+24↑r
__gmon_start___ptr dq offset __gmon_start__
                                        ; DATA XREF: _init_proc+4↑r
_ITM_registerTMCloneTable_ptr dq offset _ITM_registerTMCloneTable
                                        ; DATA XREF: sub_C40+28↑r
__cxa_finalize_ptr dq offset __imp___cxa_finalize
                                        ; DATA XREF: __cxa_finalize↑r
                                        ; sub_C90+9↑r
_got            ends

; ===========================================================================

; Segment type: Pure data
; Segment permissions: Read/Write
; Segment alignment '32byte' can not be represented in assembly
_data           segment para public 'DATA' use64
                assume cs:_data
                ;org 202000h
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
off_202008      dq offset off_202008    ; DATA XREF: sub_C90+17↑r
                                        ; .data:off_202008↓o
                align 20h
                db 0B8h
                db  8Ch
                db  68h ; h
                db  3Ch ; <
unk_202024      db 0D9h                 ; DATA XREF: sub_1216+20C↑o
                                        ; sub_1216+21D↑o
                db 0C0h
                db  65h ; e
                db 0A2h
                db 0D8h
                db 0F5h
                db 0CDh
                db  6Fh ; o
                db  2Bh ; +
                db 0A6h
                db  6Dh ; m
                db  15h
                db  88h
                db  25h ; %
                db  54h ; T
                db    2
                db  9Dh
                db  12h
                db 0FCh
                db 0A4h
                db    4
                db  51h ; Q
                db  2Ch ; ,
                db 0BDh
                db 0F4h
                db  49h ; I
                db  89h
                db 0B3h
                db 0B2h
                db 0B6h
                db 0D3h
                db 0D9h
                db 0DBh
                db    9
                db 0BEh
                db  85h
                db  1Ch
                db 0C2h
                db  48h ; H
                db    8
                db 0B5h
                db  3Bh ; ;
                db  7Ah ; z
                db  6Eh ; n
                db 0C7h
                db 0E3h
                db 0AAh
                db  6Bh ; k
                db 0E7h
                db 0A6h
                db  6Bh ; k
                db 0A3h
                db 0F8h
                db  98h
                db  61h ; a
                db 0EDh
                db 0E1h
                db 0EAh
                db 0A0h
                db  93h
                db 0A0h
                db  74h ; t
                db  6Dh ; m
                db  7Ch ; |
                db  7Dh ; }
                db  2Bh ; +
                db    1
                db  99h
                db 0EDh
                db  4Ah ; J
                db 0A2h
                db 0A3h
                db  85h
                db  1Dh
                db  11h
                db  4Dh ; M
                db    0
                db 0BCh
                db 0B9h
                db 0E8h
                db  63h ; c
                db  25h ; %
                db  8Ch
                db  5Ch ; \
                db 0BDh
unk_202079      db  77h ; w             ; DATA XREF: sub_1216+25↑o
                db  3Dh ; =
                db  53h ; S
                db 0B7h
                db  92h
                db 0F1h
                db  86h
                db  9Ah
                db 0DCh
                db 0F5h
                db  50h ; P
                db  73h ; s
                db  3Fh ; ?
                db  4Ah ; J
                db 0D7h
                db  5Ah ; Z
                db  46h ; F
                db  40h ; @
                db  6Bh ; k
                db 0F4h
                db  9Ah
                db 0F7h
                db 0B8h
                db  52h ; R
                db  3Fh ; ?
                db  25h ; %
                db  81h
                db 0C6h
                db  93h
                db  52h ; R
                db 0F5h
                db  0Ah
                db  8Fh
                db  49h ; I
                db 0C2h
                db  21h ; !
                db  3Ah ; :
                db  48h ; H
                db 0BCh
                db  16h
                db  3Eh ; >
                db  0Ch
                db  8Ah
                db  7Eh ; ~
                db  57h ; W
                db  62h ; b
                db 0D8h
                db  9Dh
                db 0A2h
                db  44h ; D
                db  92h
                db  3Dh ; =
                db  3Bh ; ;
                db  4Ah ; J
                db  8Fh
                db  7Bh ; {
                db  70h ; p
                db  11h
                db  41h ; A
                db    3
                db  63h ; c
                db  37h ; 7
                db  0Eh
                db 0F3h
                db  80h
                db 0D0h
                db  15h
                db 0BBh
                db  19h
                db 0D1h
                db 0D2h
                db  57h ; W
                db 0DEh
                db  5Ch ; \
                db 0D6h
                db  35h ; 5
                db 0BEh
                db 0AEh
                db 0D3h
                db  61h ; a
                db 0F3h
                db  65h ; e
                db  9Fh
                db  2Eh ; .
                db 0B0h
                db  2Eh ; .
                db 0AAh
                db  20h
                db  40h ; @
                db 0EBh
                db  23h ; #
                db 0A3h
                db  23h ; #
                db  31h ; 1
                db  97h
                db 0A4h
                db    2
                db 0ACh
                db  5Fh ; _
                db  1Bh
                db  7Eh ; ~
                db  31h ; 1
                db  73h ; s
                db  5Ch ; \
                db  8Eh
                db  49h ; I
                db  91h
                db  4Ch ; L
                db 0F8h
                db  64h ; d
                db 0AEh
                db 0EBh
                db 0CAh
                db  4Dh ; M
                db  1Ah
                db  7Ah ; z
                db  7Bh ; {
                db 0C5h
                db  9Ah
                db 0BCh
                db 0B0h
                db 0BEh
                db  5Fh ; _
                db 0D4h
                db 0F0h
                db 0F7h
                db  78h ; x
                db 0F2h
                db 0A3h
                db 0D7h
                db  0Eh
                db  21h ; !
                db    9
                db  81h
                db  7Eh ; ~
                db  97h
                db 0CBh
                db  0Fh
                db 0E4h
                db 0C3h
                db  74h ; t
                db  92h
                db 0AFh
                db  3Eh ; >
                db 0DFh
                db 0CAh
                db 0B9h
                db  5Bh ; [
                db  8Fh
                db  53h ; S
                db  17h
                db  3Fh ; ?
                db  12h
                db  77h ; w
                db  14h
                db    3
                db  6Eh ; n
                db  8Ch
                db 0F5h
                db  12h
                db  64h ; d
                db    4
                db  34h ; 4
                db  6Dh ; m
                db  86h
                db 0B2h
                db    5
                db  51h ; Q
                db 0C1h
                db 0E9h
                db  15h
                db  36h ; 6
                db  7Bh ; {
                db 0C4h
                db  75h ; u
                db  5Bh ; [
                db  8Eh
                db  2Eh ; .
                db 0B6h
                db  1Dh
                db  82h
                db 0CEh
                db  5Dh ; ]
                db  94h
                db  45h ; E
                db  71h ; q
                db  97h
                db 0B4h
                db 0FEh
                db  8Dh
                db 0C7h
                db  62h ; b
                db  92h
                db 0FBh
                db 0D0h
                db  18h
                db 0ADh
                db 0D5h
                db  69h ; i
                db  6Fh ; o
                db 0BFh
                db  7Eh ; ~
                db 0A6h
                db  3Bh ; ;
                db  43h ; C
                db  1Bh
                db  96h
                db 0D1h
                db  49h ; I
                db  4Dh ; M
                db 0EFh
                db 0CBh
                db  1Bh
                db  4Ch ; L
                db  60h ; `
                db  61h ; a
                db 0BEh
                db 0F8h
                db  16h
                db 0BCh
                db  85h
                db 0DDh
                db  1Fh
                db  17h
                db 0D8h
                db 0EFh
                db  30h ; 0
                db  86h
                db 0C5h
                db  99h
                db 0F6h
                db  84h
                db  18h
                db  9Ch
                db 0BFh
                db  5Bh ; [
                db 0B7h
                db  55h ; U
                db  2Dh ; -
                db    0
                db 0A2h
                db  1Ch
                db 0CCh
                db 0BEh
                db  69h ; i
                db  2Ch ; ,
                db  1Fh
                db  27h ; '
                db  24h ; $
                db  36h ; 6
                db 0E4h
                db 0AAh
                db  13h
                db    3
                db 0C2h
                db 0EBh
                db 0EDh
                db  49h ; I
                db  9Eh
                db 0D7h
                db 0EAh
                db  32h ; 2
                db  78h ; x
                db  5Eh ; ^
                db  9Fh
                db 0F4h
                db 0DBh
                db 0CBh
                db 0F6h
                db  75h ; u
                db 0B9h
                db  41h ; A
                db  18h
                db  5Ch ; \
                db 0C7h
                db  35h ; 5
                db  6Dh ; m
                db  14h
                db  35h ; 5
                db  2Ah ; *
                db 0CEh
                db  1Dh
                db  8Dh
                db 0F3h
                db 0A9h
                db 0E9h
                db 0B0h
                db  96h
                db  32h ; 2
                db  4Fh ; O
                db  6Eh ; n
                db  1Dh
                db  81h
                db 0E7h
                db  7Bh ; {
                db  21h ; !
                db 0DBh
                db  57h ; W
                db 0ECh
                db 0D2h
                db 0CDh
                db 0A5h
                db  13h
unk_2021A8      db 0D8h                 ; DATA XREF: sub_1216+1EA↑o
                                        ; sub_1216+1FB↑o ...
                db  66h ; f
                db  7Fh ; 
                db 0EEh
                db  51h ; Q
                db 0BBh
                db  93h
                db  73h ; s
                db  94h
                db  34h ; 4
                db  79h ; y
                db  60h ; `
                db  7Ch ; |
                db 0D1h
                db 0ACh
                db  68h ; h
                db  48h ; H
                db 0CDh
                db 0FBh
                db  1Ah
                db  6Fh ; o
                db 0EFh
                db  50h ; P
                db  27h ; '
                db 0B0h
                db  17h
unk_2021C2      db  21h ; !             ; DATA XREF: sub_1216+139↑o
                                        ; sub_1216+14B↑o
                db 0B0h
                db  26h ; &
                db  8Dh
                db  60h ; `
                db  5Dh ; ]
                db 0F2h
                db 0E4h
                db 0D0h
                db  3Ah ; :
                db 0E9h
                db  78h ; x
                db 0D4h
                db 0ECh
                db 0CDh
                db  6Eh ; n
                db  0Bh
                db 0B0h
                db  5Ah ; Z
                db  10h
                db  60h ; `
byte_2021D7     db 7Ah                  ; DATA XREF: sub_1216+190↑o
                                        ; sub_1216+19C↑r
                db    4
                db 0DCh
                db  52h ; R
                db 0E0h
unk_2021DC      db 0C7h                 ; DATA XREF: sub_1216+36↑o
                                        ; sub_1216+7C↑o
                db  30h ; 0
                db  5Ch ; \
                db 0D2h
                db  15h
                db    9
                db  95h
                db  93h
                db  58h ; X
                db  16h
                db  9Fh
                db    2
                db  19h
                db  2Eh ; .
                db  66h ; f
                db  89h
                db  31h ; 1
                db 0E1h
                db  35h ; 5
                db  6Eh ; n
                db  90h
                db  2Ah ; *
                db  8Fh
                db  7Bh ; {
                db  27h ; '
                db 0C1h
                db  95h
                db 0C2h
                db  31h ; 1
                db  67h ; g
                db    2
                db  9Ch
                db 0FDh
                db 0A8h
                db  1Bh
                db 0EBh
                db  6Ch ; l
                db  30h ; 0
                db 0EEh
                db  62h ; b
                db  73h ; s
                db  85h
                db  34h ; 4
                db  3Eh ; >
byte_202208     db 2Ch                  ; DATA XREF: sub_1216+1C8↑o
                                        ; sub_1216+316↑r ...
                db 0A1h
                db    2
                db  56h ; V
                db  90h
                db  52h ; R
                db 0F0h
                db  4Dh ; M
                db 0C0h
unk_202211      db 0CDh                 ; DATA XREF: sub_1216+1D9↑o
                                        ; sub_1216+284↑o
                db 0CDh
                db  49h ; I
                db  90h
                db  7Eh ; ~
                db  0Ah
                db 0F9h
                db 0FEh
                db 0ADh
                db  86h
                db  7Ch ; |
                db    5
                db  20h
                db  74h ; t
                db  59h ; Y
                db 0C9h
                db 0F3h
                db  71h ; q
                db  61h ; a
                db  54h ; T
                db 0C9h
                db  78h ; x
                db 0D4h
                db 0BDh
                db  9Eh
                db  24h ; $
                db  9Dh
                db    5
                db  95h
                db  3Dh ; =
                db  23h ; #
                db 0D4h
                db  8Dh
                db  3Dh ; =
                db  18h
                db 0FDh
                db 0D8h
                db  28h ; (
                db  5Eh ; ^
                db  87h
                db  6Ch ; l
                db  0Eh
; char nptr
nptr            db 77h                  ; DATA XREF: sub_1216+47↑o
                                        ; sub_1216+53↑r ...
                db  8Ah
                db 0DFh
; char file[1]
file            db 8                    ; DATA XREF: sub_1216+8D↑o
                                        ; sub_1216+1A7↑o ...
                db  82h
                db 0F7h
                db  4Fh ; O
                db 0B1h
                db  38h ; 8
                db 0D1h
                db 0B8h
                db  67h ; g
                db  46h ; F
                db 0D1h
byte_202249     db 20h                  ; DATA XREF: sub_1216+9E↑o
                                        ; sub_1216:loc_155B↑r ...
                db  6Fh ; o
                db 0B1h
                db 0A5h
                db 0CAh
                db 0F2h
; char byte_20224F
byte_20224F     db 4                    ; DATA XREF: sub_1216+AF↑o
                                        ; sub_1216:loc_14AB↑r ...
                db  76h ; v
                db  5Dh ; ]
                db 0F5h
                db 0EBh
                db  50h ; P
                db  50h ; P
                db 0A5h
                db  44h ; D
                db 0CDh
                db 0B0h
                db  30h ; 0
                db  99h
                db  42h ; B
                db  3Dh ; =
                db  35h ; 5
                db  1Ch
byte_202260     db 0BAh                 ; DATA XREF: sub_1216+C0↑o
                                        ; sub_1216+395↑r ...
                db  24h ; $
                db 0DFh
                db  3Ch ; <
unk_202264      db 0E8h                 ; DATA XREF: sub_1216+D1↑o
                                        ; sub_1216+E2↑o ...
                db    2
                db 0E3h
                db 0E3h
                db  39h ; 9
                db 0B6h
                db  57h ; W
                db 0CEh
                db  17h
                db  2Dh ; -
                db 0DAh
                db  47h ; G
                db 0D5h
                db  77h ; w
                db  8Ah
                db  2Ch ; ,
                db  41h ; A
                db    2
                db 0FBh
                db 0CEh
                db 0F8h
                db 0CEh
                db  91h
                db 0EDh
                db 0E1h
                db  5Fh ; _
                db 0C0h
                db  16h
                db 0E9h
unk_202281      db 0A7h                 ; DATA XREF: sub_1216+F3↑o
                                        ; sub_1216+104↑o
                db  9Bh
                db 0FDh
                db  57h ; W
                db 0EFh
                db  94h
                db 0CBh
                db  54h ; T
                db  7Eh ; ~
                db 0A8h
                db  56h ; V
                db  5Dh ; ]
                db 0B3h
                db 0F6h
                db  79h ; y
                db 0AAh
                db 0D1h
                db  8Eh
                db 0DDh
                db  99h
                db 0C2h
                db  24h ; $
                db    0
_data           ends

; ===========================================================================

; Segment type: Pure data
; Segment permissions: Read/Write
LOAD            segment byte public 'DATA' use64
                assume cs:LOAD
                ;org 202298h
unk_202298      db    ? ;               ; DATA XREF: sub_C00↑o
                                        ; sub_C00+8↑o ...
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
LOAD            ends

; ===========================================================================

; Segment type: Uninitialized
; Segment permissions: Read/Write
; Segment alignment '32byte' can not be represented in assembly
_bss            segment para public 'BSS' use64
                assume cs:_bss
                ;org 2022A0h
                assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                public environ ; weak
; char **environ
environ         dq ?                    ; DATA XREF: LOAD:0000000000000540↑o
                                        ; LOAD:0000000000000558↑o ...
                                        ; Alternative name is '__environ'
                                        ; Copy of shared data
                align 20h
                public stderr
; FILE *stderr
stderr          dq ?                    ; DATA XREF: LOAD:0000000000000588↑o
                                        ; main+96↑r
                                        ; Copy of shared data
byte_2022C8     db ?                    ; DATA XREF: sub_C90↑r
                                        ; sub_C90+28↑w
                align 20h
unk_2022E0      db    ? ;               ; DATA XREF: sub_CDA+39↑o
                                        ; sub_D3B+25↑o ...
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
byte_2023E0     db ?                    ; DATA XREF: sub_CDA+1F↑w
                                        ; sub_CDA:loc_CFF↑r ...
byte_2023E1     db ?                    ; DATA XREF: sub_CDA+12↑w
                                        ; sub_CDA+18↑r ...
byte_2023E2     db ?                    ; DATA XREF: sub_CDA+4↑w
                                        ; sub_CDA+B↑r ...
                align 8
_bss            ends

; ===========================================================================

; Segment type: Externs
; extern
; char *getenv(const char *name)
                extrn getenv:near       ; DATA XREF: .got:getenv_ptr↑o
; int *_errno_location(void)
                extrn __errno_location:near
                                        ; DATA XREF: .got:__errno_location_ptr↑o
; __pid_t getpid(void)
                extrn getpid:near       ; DATA XREF: .got:getpid_ptr↑o
; size_t strlen(const char *s)
                extrn strlen:near       ; DATA XREF: .got:strlen_ptr↑o
                extrn __stack_chk_fail:near
                                        ; DATA XREF: .got:__stack_chk_fail_ptr↑o
; void *memset(void *s, int c, size_t n)
                extrn memset:near       ; DATA XREF: .got:memset_ptr↑o
; int __cdecl _libc_start_main(int (__cdecl *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)
                extrn __libc_start_main:near
                                        ; CODE XREF: start+24↑p
                                        ; DATA XREF: .got:__libc_start_main_ptr↑o
; int memcmp(const void *s1, const void *s2, size_t n)
                extrn memcmp:near       ; DATA XREF: .got:memcmp_ptr↑o
; void *calloc(size_t nmemb, size_t size)
                extrn calloc:near       ; DATA XREF: .got:calloc_ptr↑o
; int putenv(char *string)
                extrn putenv:near       ; DATA XREF: .got:putenv_ptr↑o
; __int64 atoll(const char *nptr)
                extrn atoll:near        ; DATA XREF: .got:atoll_ptr↑o
; int fprintf(FILE *stream, const char *format, ...)
                extrn fprintf:near      ; DATA XREF: .got:fprintf_ptr↑o
; void *memcpy(void *dest, const void *src, size_t n)
                extrn memcpy:near       ; DATA XREF: .got:memcpy_ptr↑o
; time_t time(time_t *timer)
                extrn time:near         ; DATA XREF: .got:time_ptr↑o
; int _xstat(int ver, const char *filename, struct stat *stat_buf)
                extrn __xstat:near      ; DATA XREF: .got:__xstat_ptr↑o
; void *malloc(size_t size)
                extrn malloc:near       ; DATA XREF: .got:malloc_ptr↑o
                extrn __isoc99_sscanf:near
                                        ; DATA XREF: .got:__isoc99_sscanf_ptr↑o
; int execvp(const char *file, char *const argv[])
                extrn execvp:near       ; DATA XREF: .got:execvp_ptr↑o
; int sprintf(char *s, const char *format, ...)
                extrn sprintf:near      ; DATA XREF: .got:sprintf_ptr↑o
; char *strdup(const char *s)
                extrn strdup:near       ; DATA XREF: .got:strdup_ptr↑o
; char *strerror(int errnum)
                extrn strerror:near     ; DATA XREF: .got:strerror_ptr↑o
                extrn __imp___cxa_finalize:near ; weak
                                        ; DATA XREF: .got:__cxa_finalize_ptr↑o
                extrn _ITM_deregisterTMCloneTable ; weak
                                        ; DATA XREF: .got:_ITM_deregisterTMCloneTable_ptr↑o
                extrn __gmon_start__:near ; weak
                                        ; CODE XREF: _init_proc+10↑p
                                        ; DATA XREF: .got:__gmon_start___ptr↑o
                extrn _ITM_registerTMCloneTable ; weak
                                        ; DATA XREF: .got:_ITM_registerTMCloneTable_ptr↑o


                end start
