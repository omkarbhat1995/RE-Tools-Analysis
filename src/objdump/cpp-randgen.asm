; ---------------------------------------------------------------------------

Elf32_Sym       struc ; (sizeof=0x10, align=0x4, mappedto_1)
                                        ; XREF: LOAD:000001CC/r
                                        ; LOAD:000001DC/r ...
st_name         dd ?                    ; offset (000002EC)
st_value        dd ?                    ; offset (00000000)
st_size         dd ?
st_info         db ?
st_other        db ?
st_shndx        dw ?
Elf32_Sym       ends

; ---------------------------------------------------------------------------

Elf32_Rel       struc ; (sizeof=0x8, align=0x4, copyof_2)
                                        ; XREF: LOAD:000004F4/r
                                        ; LOAD:000004FC/r ...
r_offset        dd ?
r_info          dd ?
Elf32_Rel       ends

; ---------------------------------------------------------------------------

Elf32_Dyn       struc ; (sizeof=0x8, align=0x4, copyof_3)
                                        ; XREF: LOAD:_DYNAMIC/r
                                        ; LOAD:00001EB8/r ...
d_tag           dd ?
d_un            Elf32_Dyn::$A263394DDF3EC2D4B1B8448EDD30E249 ?
Elf32_Dyn       ends

; ---------------------------------------------------------------------------

Elf32_Dyn::$A263394DDF3EC2D4B1B8448EDD30E249 union ; (sizeof=0x4, align=0x4, copyof_4)
                                        ; XREF: Elf32_Dyn/r
d_val           dd ?
d_ptr           dd ?
Elf32_Dyn::$A263394DDF3EC2D4B1B8448EDD30E249 ends

; ---------------------------------------------------------------------------

Elf32_Verneed   struc ; (sizeof=0x10, align=0x4, mappedto_5)
                                        ; XREF: LOAD:000004A4/r
                                        ; LOAD:000004C4/r
vn_version      dw ?
vn_cnt          dw ?
vn_file         dd ?                    ; offset (000002EC)
vn_aux          dd ?
vn_next         dd ?
Elf32_Verneed   ends

; ---------------------------------------------------------------------------

Elf32_Vernaux   struc ; (sizeof=0x10, align=0x4, mappedto_6)
                                        ; XREF: LOAD:000004B4/r
                                        ; LOAD:000004D4/r ...
vna_hash        dd ?
vna_flags       dw ?
vna_other       dw ?
vna_name        dd ?                    ; offset (000002EC)
vna_next        dd ?
Elf32_Vernaux   ends


;
; +-------------------------------------------------------------------------+
; |   This file has been generated by The Interactive Disassembler (IDA)    |
; |           Copyright (c) 2018 Hex-Rays, <support@hex-rays.com>           |
; |                      License info: 48-B51B-7454-28                      |
; |            University of Virginia / Dpt of Computer Science             |
; +-------------------------------------------------------------------------+
;
; Input SHA256 : E00890924643FBD23D3F7964E8B5C54A6F371F0DCCDFCB5462D27B039067BA1E
; Input MD5    : 647558A6A777FC8D70043E4392A1707F
; Input CRC32  : 8A2ACE2C

; File Name   : /u/zy8ez/zoya/Binaries/cpp-randgen.o
; Format      : ELF for Intel 386 (Shared object)
; Interpreter '/lib/ld-linux.so.2'
; Needed Library 'libstdc++.so.6'
; Needed Library 'libc.so.6'
;
; Source File : 'crtstuff.c'
; Source File : 'randgen.cpp'
; Source File : 'crtstuff.c'

                .686p
                .mmx
                .model flat
.intel_syntax noprefix

; ===========================================================================

; Segment type: Pure code
; Segment permissions: Read/Execute
LOAD            segment mempage public 'CODE' use32
                assume cs:LOAD
                assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
dword_0         dd 464C457Fh            ; DATA XREF: LOAD:000001DC↓o
                                        ; LOAD:000001EC↓o ...
                                        ; File format: \x7FELF
                db 1                    ; File class: 32-bit
                db 1                    ; Data encoding: little-endian
                db 1                    ; File version
                db 0                    ; OS/ABI: UNIX System V ABI
                db 0                    ; ABI Version
                db 7 dup(0)             ; Padding
                dw 3                    ; File type: Shared object
                dw 3                    ; Machine: Intel 386
                dd 1                    ; File version
                dd offset _start        ; Entry point
                dd 34h                  ; PHT file offset
                dd 1A60h                ; SHT file offset
                dd 0                    ; Processor-specific flags
                dw 34h                  ; ELF header size
                dw 20h                  ; PHT entry size
                dw 9                    ; Number of entries in PHT
                dw 28h                  ; SHT entry size
                dw 1Dh                  ; Number of entries in SHT
                dw 1Ch                  ; SHT entry index for string table
; ELF32 Program Header
; PHT Entry 0
dword_34        dd 6                    ; DATA XREF: LOAD:0000003C↓o
                                        ; Type: PHDR
                dd 34h                  ; File offset
                dd offset dword_34      ; Virtual address
                dd 34h                  ; Physical address
                dd 120h                 ; Size in file image
                dd 120h                 ; Size in memory image
                dd 4                    ; Flags
                dd 4                    ; Alignment
; PHT Entry 1
                dd 3                    ; Type: INTERP
                dd 154h                 ; File offset
                dd offset aLibLdLinuxSo2 ; Virtual address
                dd 154h                 ; Physical address
                dd 13h                  ; Size in file image
                dd 13h                  ; Size in memory image
                dd 4                    ; Flags
                dd 1                    ; Alignment
; PHT Entry 2
                dd 1                    ; Type: LOAD
                dd 0                    ; File offset
                dd 0                    ; Virtual address
                dd 0                    ; Physical address
                dd 0B84h                ; Size in file image
                dd 0B84h                ; Size in memory image
                dd 5                    ; Flags
                dd 1000h                ; Alignment
; PHT Entry 3
                dd 1                    ; Type: LOAD
                dd 0EA4h                ; File offset
                dd offset __frame_dummy_init_array_entry ; Virtual address
                dd 1EA4h                ; Physical address
                dd 164h                 ; Size in file image
                dd 168h                 ; Size in memory image
                dd 6                    ; Flags
                dd 1000h                ; Alignment
; PHT Entry 4
                dd 2                    ; Type: DYNAMIC
                dd 0EB0h                ; File offset
                dd offset _DYNAMIC      ; Virtual address
                dd 1EB0h                ; Physical address
                dd 100h                 ; Size in file image
                dd 100h                 ; Size in memory image
                dd 6                    ; Flags
                dd 4                    ; Alignment
; PHT Entry 5
                dd 4                    ; Type: NOTE
                dd 168h                 ; File offset
                dd offset dword_168     ; Virtual address
                dd 168h                 ; Physical address
                dd 44h                  ; Size in file image
                dd 44h                  ; Size in memory image
                dd 4                    ; Flags
                dd 4                    ; Alignment
; PHT Entry 6
                dd 6474E550h            ; Type: EH_FRAME
                dd 9CCh                 ; File offset
                dd offset __GNU_EH_FRAME_HDR ; Virtual address
                dd 9CCh                 ; Physical address
                dd 54h                  ; Size in file image
                dd 54h                  ; Size in memory image
                dd 4                    ; Flags
                dd 4                    ; Alignment
; PHT Entry 7
                dd 6474E551h            ; Type: STACK
                dd 0                    ; File offset
                dd 0                    ; Virtual address
                dd 0                    ; Physical address
                dd 0                    ; Size in file image
                dd 0                    ; Size in memory image
                dd 6                    ; Flags
                dd 10h                  ; Alignment
; PHT Entry 8
                dd 6474E552h            ; Type: RO-AFTER
                dd 0EA4h                ; File offset
                dd offset __frame_dummy_init_array_entry ; Virtual address
                dd 1EA4h                ; Physical address
                dd 15Ch                 ; Size in file image
                dd 15Ch                 ; Size in memory image
                dd 4                    ; Flags
                dd 1                    ; Alignment
aLibLdLinuxSo2  db '/lib/ld-linux.so.2',0
                                        ; DATA XREF: LOAD:0000005C↑o
                align 4
dword_168       dd 4, 10h, 1, 554E47h, 0
                                        ; DATA XREF: LOAD:000000DC↑o
                dd 3, 2, 0
                dd 4, 14h, 3, 554E47h, 0CD5B29BFh, 71C24C7Ch, 9EA8A07Bh
                dd 0CDA7C9C6h, 0BE42B296h
; ELF GNU Hash Table
elf_gnu_hash_nbuckets dd 2
elf_gnu_hash_symbias dd 11h
elf_gnu_hash_bitmask_nwords dd 1
elf_gnu_hash_shift dd 5
elf_gnu_hash_indexes dd 20002000h
elf_gnu_hash_bucket dd 0, 11h
elf_gnu_hash_chain dd 0C0E34BADh
; ELF Symbol Table
                Elf32_Sym <0>
                Elf32_Sym <offset aCxaFinalize - offset byte_2EC, offset dword_0, 0, \ ; "__cxa_finalize"
                           22h, 0, 0>
                Elf32_Sym <offset aZst4endlicst11 - offset byte_2EC, offset dword_0, \ ; "_ZSt4endlIcSt11char_traitsIcEERSt13basi"...
                           0, 12h, 0, 0>
                Elf32_Sym <offset aCxaAtexit - offset byte_2EC, offset dword_0, 0, \ ; "__cxa_atexit"
                           12h, 0, 0>
                Elf32_Sym <offset aTime - offset byte_2EC, offset dword_0, 0, 12h, 0, \ ; "time"
                           0>
                Elf32_Sym <offset aSrand - offset byte_2EC, offset dword_0, 0, 12h, 0,\ ; "srand"
                           0>
                Elf32_Sym <offset aLibcStartMain - offset byte_2EC, offset dword_0, 0,\ ; "__libc_start_main"
                           12h, 0, 0>
                Elf32_Sym <offset aZstlsist11char - offset byte_2EC, offset dword_0, \ ; "_ZStlsISt11char_traitsIcEERSt13basic_os"...
                           0, 12h, 0, 0>
                Elf32_Sym <offset aZnsolsepfrsosE - offset byte_2EC, offset dword_0, \ ; "_ZNSolsEPFRSoS_E"
                           0, 12h, 0, 0>
                Elf32_Sym <offset aSrand+1 - offset byte_2EC, offset dword_0, 0, 12h, \ ; "rand"
                           0, 0>
                Elf32_Sym <offset aZst4cout - offset byte_2EC, offset dword_0, 0, 11h,\ ; "_ZSt4cout"
                           0, 0>
                Elf32_Sym <offset aZnst8iosBase4i_0 - offset byte_2EC, offset dword_0,\ ; "_ZNSt8ios_base4InitC1Ev"
                           0, 12h, 0, 0>
                Elf32_Sym <offset aZnsolsei - offset byte_2EC, offset dword_0, 0, 12h,\ ; "_ZNSolsEi"
                           0, 0>
                Elf32_Sym <offset aItmDeregistert - offset byte_2EC, offset dword_0, \ ; "_ITM_deregisterTMCloneTable"
                           0, 20h, 0, 0>
                Elf32_Sym <offset aGmonStart - offset byte_2EC, offset dword_0, 0, \ ; "__gmon_start__"
                           20h, 0, 0>
                Elf32_Sym <offset aItmRegistertmc - offset byte_2EC, offset dword_0, \ ; "_ITM_registerTMCloneTable"
                           0, 20h, 0, 0>
                Elf32_Sym <offset aZnst8iosBase4i - offset byte_2EC, offset dword_0, \ ; "_ZNSt8ios_base4InitD1Ev"
                           0, 12h, 0, 0>
                Elf32_Sym <offset aIoStdinUsed - offset byte_2EC, \ ; "_IO_stdin_used"
                           offset _IO_stdin_used, 4, 11h, 0, 10h>
; ELF String Table
byte_2EC        db 0                    ; DATA XREF: LOAD:000001DC↑o
                                        ; LOAD:000001EC↑o ...
aLibstdcSo6     db 'libstdc++.so.6',0   ; DATA XREF: LOAD:000004A4↓o
aGmonStart      db '__gmon_start__',0   ; DATA XREF: LOAD:000002AC↑o
aItmDeregistert db '_ITM_deregisterTMCloneTable',0
                                        ; DATA XREF: LOAD:0000029C↑o
aItmRegistertmc db '_ITM_registerTMCloneTable',0
                                        ; DATA XREF: LOAD:000002BC↑o
aZstlsist11char db '_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc',0
                                        ; DATA XREF: LOAD:0000023C↑o
aZst4cout       db '_ZSt4cout',0        ; DATA XREF: LOAD:0000026C↑o
aZnsolsepfrsosE db '_ZNSolsEPFRSoS_E',0 ; DATA XREF: LOAD:0000024C↑o
aZst4endlicst11 db '_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_',0
                                        ; DATA XREF: LOAD:000001EC↑o
aZnst8iosBase4i db '_ZNSt8ios_base4InitD1Ev',0
                                        ; DATA XREF: LOAD:000002CC↑o
aZnst8iosBase4i_0 db '_ZNSt8ios_base4InitC1Ev',0
                                        ; DATA XREF: LOAD:0000027C↑o
aZnsolsei       db '_ZNSolsEi',0        ; DATA XREF: LOAD:0000028C↑o
aLibcSo6        db 'libc.so.6',0        ; DATA XREF: LOAD:000004C4↓o
aIoStdinUsed    db '_IO_stdin_used',0   ; DATA XREF: LOAD:000002DC↑o
aSrand          db 'srand',0            ; DATA XREF: LOAD:0000021C↑o
                                        ; LOAD:0000025C↑o
aTime           db 'time',0             ; DATA XREF: LOAD:0000020C↑o
aCxaAtexit      db '__cxa_atexit',0     ; DATA XREF: LOAD:000001FC↑o
aCxaFinalize    db '__cxa_finalize',0   ; DATA XREF: LOAD:000001DC↑o
aLibcStartMain  db '__libc_start_main',0
                                        ; DATA XREF: LOAD:0000022C↑o
aGlibcxx34      db 'GLIBCXX_3.4',0      ; DATA XREF: LOAD:000004B4↓o
aGlibc20        db 'GLIBC_2.0',0        ; DATA XREF: LOAD:000004D4↓o
aGlibc213       db 'GLIBC_2.1.3',0      ; DATA XREF: LOAD:000004E4↓o
                align 2
; ELF GNU Symbol Version Table
                dw 0
                dw 2                    ; __cxa_finalize@@GLIBC_2.1.3
                dw 3                    ; _ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_@@GLIBCXX_3.4
                dw 2                    ; __cxa_atexit@@GLIBC_2.1.3
                dw 4                    ; time@@GLIBC_2.0
                dw 4                    ; srand@@GLIBC_2.0
                dw 4                    ; __libc_start_main@@GLIBC_2.0
                dw 3                    ; _ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@@GLIBCXX_3.4
                dw 3                    ; _ZNSolsEPFRSoS_E@@GLIBCXX_3.4
                dw 4                    ; rand@@GLIBC_2.0
                dw 3                    ; _ZSt4cout@@GLIBCXX_3.4
                dw 3                    ; _ZNSt8ios_base4InitC1Ev@@GLIBCXX_3.4
                dw 3                    ; _ZNSolsEi@@GLIBCXX_3.4
                dw 0                    ; local  symbol: _ITM_deregisterTMCloneTable
                dw 0                    ; local  symbol: __gmon_start__
                dw 0                    ; local  symbol: _ITM_registerTMCloneTable
                dw 3                    ; _ZNSt8ios_base4InitD1Ev@@GLIBCXX_3.4
                dw 1                    ; global symbol: _IO_stdin_used
                dw 0
; ELF GNU Symbol Version Requirements
                Elf32_Verneed <1, 1, offset aLibstdcSo6 - offset byte_2EC, 10h, 20h> ; "libstdc++.so.6"
                Elf32_Vernaux <8922974h, 0, 3, offset aGlibcxx34 - offset byte_2EC, 0> ; "GLIBCXX_3.4"
                Elf32_Verneed <1, 2, offset aLibcSo6 - offset byte_2EC, 10h, 0> ; "libc.so.6"
                Elf32_Vernaux <0D696910h, 0, 4, offset aGlibc20 - offset byte_2EC, \ ; "GLIBC_2.0"
                               10h>
                Elf32_Vernaux <9691F73h, 0, 2, offset aGlibc213 - offset byte_2EC, 0> ; "GLIBC_2.1.3"
; ELF REL Relocation Table
                Elf32_Rel <1EA4h, 8>    ; R_386_RELATIVE
                Elf32_Rel <1EA8h, 8>    ; R_386_RELATIVE
                Elf32_Rel <1EACh, 8>    ; R_386_RELATIVE
                Elf32_Rel <1FE4h, 8>    ; R_386_RELATIVE
                Elf32_Rel <2004h, 8>    ; R_386_RELATIVE
                Elf32_Rel <1FE0h, 106h> ; R_386_GLOB_DAT __cxa_finalize
                Elf32_Rel <1FE8h, 206h> ; R_386_GLOB_DAT _ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
                Elf32_Rel <1FECh, 0A06h> ; R_386_GLOB_DAT _ZSt4cout
                Elf32_Rel <1FF0h, 0D06h> ; R_386_GLOB_DAT _ITM_deregisterTMCloneTable
                Elf32_Rel <1FF4h, 0E06h> ; R_386_GLOB_DAT __gmon_start__
                Elf32_Rel <1FF8h, 0F06h> ; R_386_GLOB_DAT _ITM_registerTMCloneTable
                Elf32_Rel <1FFCh, 1006h> ; R_386_GLOB_DAT _ZNSt8ios_base4InitD1Ev
; ELF JMPREL Relocation Table
                Elf32_Rel <1FBCh, 307h> ; R_386_JMP_SLOT __cxa_atexit
                Elf32_Rel <1FC0h, 407h> ; R_386_JMP_SLOT time
                Elf32_Rel <1FC4h, 507h> ; R_386_JMP_SLOT srand
                Elf32_Rel <1FC8h, 607h> ; R_386_JMP_SLOT __libc_start_main
                Elf32_Rel <1FCCh, 707h> ; R_386_JMP_SLOT _ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc
                Elf32_Rel <1FD0h, 807h> ; R_386_JMP_SLOT _ZNSolsEPFRSoS_E
                Elf32_Rel <1FD4h, 907h> ; R_386_JMP_SLOT rand
                Elf32_Rel <1FD8h, 0B07h> ; R_386_JMP_SLOT _ZNSt8ios_base4InitC1Ev
                Elf32_Rel <1FDCh, 0C07h> ; R_386_JMP_SLOT _ZNSolsEi
LOAD            ends

; ===========================================================================

; Segment type: Pure code
; Segment permissions: Read/Execute
_init           segment dword public 'CODE' use32
                assume cs:_init
                ;org 59Ch
                assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B R O U T I N E =======================================


                public _init_proc
_init_proc      proc near               ; CODE XREF: __libc_csu_init+1C↓p
                push    ebx             ; _init
                sub     esp, 8
                call    __x86_get_pc_thunk_bx
                add     ebx, 1A0Bh
                mov     eax, ds:(__gmon_start___ptr - 1FB0h)[ebx]
                test    eax, eax
                jz      short loc_5BA
                call    ___gmon_start__

loc_5BA:                                ; CODE XREF: _init_proc+17↑j
                add     esp, 8
                pop     ebx
                retn
_init_proc      endp

_init           ends

; ===========================================================================

; Segment type: Pure code
; Segment permissions: Read/Execute
LOAD            segment mempage public 'CODE' use32
                assume cs:LOAD
                ;org 5BFh
                assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                align 10h
LOAD            ends

; ===========================================================================

; Segment type: Pure code
; Segment permissions: Read/Execute
_plt            segment para public 'CODE' use32
                assume cs:_plt
                ;org 5C0h
                assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B R O U T I N E =======================================


sub_5C0         proc near               ; CODE XREF: .plt:000005DB↓j
                                        ; .plt:000005EB↓j ...
; __unwind {
                push    dword ptr [ebx+4]
                jmp     dword ptr [ebx+8]
sub_5C0         endp

; ---------------------------------------------------------------------------
                align 10h
; [00000006 BYTES: COLLAPSED FUNCTION ___cxa_atexit. PRESS NUMPAD+ TO EXPAND]
; ---------------------------------------------------------------------------
                push    0
                jmp     sub_5C0
; [00000006 BYTES: COLLAPSED FUNCTION _time. PRESS NUMPAD+ TO EXPAND]
; ---------------------------------------------------------------------------
                push    8
                jmp     sub_5C0
; [00000006 BYTES: COLLAPSED FUNCTION _srand. PRESS NUMPAD+ TO EXPAND]
; ---------------------------------------------------------------------------
                push    10h
                jmp     sub_5C0
; [00000006 BYTES: COLLAPSED FUNCTION ___libc_start_main. PRESS NUMPAD+ TO EXPAND]
; ---------------------------------------------------------------------------
                push    18h
                jmp     sub_5C0
; [00000006 BYTES: COLLAPSED FUNCTION std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const*). PRESS NUMPAD+ TO EXPAND]
; ---------------------------------------------------------------------------
                push    20h ; ' '
                jmp     sub_5C0
; [00000006 BYTES: COLLAPSED FUNCTION std::ostream::operator<<(std::ostream & (*)(std::ostream &)). PRESS NUMPAD+ TO EXPAND]
; ---------------------------------------------------------------------------
                push    28h ; '('
                jmp     sub_5C0
; [00000006 BYTES: COLLAPSED FUNCTION _rand. PRESS NUMPAD+ TO EXPAND]
; ---------------------------------------------------------------------------
                push    30h ; '0'
                jmp     sub_5C0
; [00000006 BYTES: COLLAPSED FUNCTION std::ios_base::Init::Init(void). PRESS NUMPAD+ TO EXPAND]
; ---------------------------------------------------------------------------
                push    38h ; '8'
                jmp     sub_5C0
; [00000006 BYTES: COLLAPSED FUNCTION std::ostream::operator<<(int). PRESS NUMPAD+ TO EXPAND]
; ---------------------------------------------------------------------------
                push    40h ; '@'
                jmp     sub_5C0
; } // starts at 5C0
_plt            ends

; ===========================================================================

; Segment type: Pure code
; Segment permissions: Read/Execute
; Segment alignment 'qword' can not be represented in assembly
_plt_got        segment para public 'CODE' use32
                assume cs:_plt_got
                ;org 660h
                assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
; [00000006 BYTES: COLLAPSED FUNCTION ___cxa_finalize. PRESS NUMPAD+ TO EXPAND]
                align 4

; =============== S U B R O U T I N E =======================================


___gmon_start__ proc near               ; CODE XREF: _init_proc+19↑p
                jmp     ds:(_ZNSt8ios_base4InitD1Ev_ptr+4Ch)[ebx] ; PIC mode
___gmon_start__ endp

; ---------------------------------------------------------------------------
                align 10h
; } // starts at 660
_plt_got        ends

; ===========================================================================

; Segment type: Pure code
; Segment permissions: Read/Execute
_text           segment para public 'CODE' use32
                assume cs:_text
                ;org 670h
                assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B R O U T I N E =======================================

; Attributes: noreturn fuzzy-sp

                public _start
_start          proc near               ; DATA XREF: LOAD:00000018↑o
                xor     ebp, ebp
                pop     esi
                mov     ecx, esp
                and     esp, 0FFFFFFF0h
                push    eax
                push    esp             ; stack_end
                push    edx             ; rtld_fini
                call    sub_6A2
                add     ebx, 1930h
                lea     eax, (__libc_csu_fini - 1FB0h)[ebx]
                push    eax             ; fini
                lea     eax, (__libc_csu_init - 1FB0h)[ebx]
                push    eax             ; init
                push    ecx             ; ubp_av
                push    esi             ; argc
                push    ds:(main_ptr - 1FB0h)[ebx] ; main
                call    ___libc_start_main
                hlt
_start          endp


; =============== S U B R O U T I N E =======================================


sub_6A2         proc near               ; CODE XREF: _start+B↑p
                mov     ebx, [esp+0]
                retn
sub_6A2         endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================


                public __x86_get_pc_thunk_bx
__x86_get_pc_thunk_bx proc near         ; CODE XREF: _init_proc+4↑p
                                        ; __do_global_dtors_aux+4↓p ...
                mov     ebx, [esp+0]
                retn
__x86_get_pc_thunk_bx endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================


deregister_tm_clones proc near          ; CODE XREF: __do_global_dtors_aux:loc_786↓p
                call    __x86_get_pc_thunk_dx
                add     edx, 18EBh
                lea     ecx, (__bss_start - 1FB0h)[edx]
                lea     eax, (__bss_start - 1FB0h)[edx]
                cmp     eax, ecx
                jz      short locret_6F8
                mov     eax, ds:(_ITM_deregisterTMCloneTable_ptr - 1FB0h)[edx]
                test    eax, eax
                jz      short locret_6F8
                push    ebp
                mov     ebp, esp
                sub     esp, 14h
                push    ecx
                call    eax
                add     esp, 10h
                leave
                retn
; ---------------------------------------------------------------------------
                align 8

locret_6F8:                             ; CODE XREF: deregister_tm_clones+19↑j
                                        ; deregister_tm_clones+23↑j
                rep retn
deregister_tm_clones endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================


register_tm_clones proc near            ; CODE XREF: frame_dummy+4↓j
                call    __x86_get_pc_thunk_dx
                add     edx, 18ABh
                push    ebp
                lea     ecx, (__bss_start - 1FB0h)[edx]
                lea     eax, (__bss_start - 1FB0h)[edx]
                sub     eax, ecx
                mov     ebp, esp
                push    ebx
                sar     eax, 2
                mov     ebx, eax
                sub     esp, 4
                shr     ebx, 1Fh
                add     eax, ebx
                sar     eax, 1
                jz      short loc_742
                mov     edx, ds:(_ITM_registerTMCloneTable_ptr - 1FB0h)[edx]
                test    edx, edx
                jz      short loc_742
                sub     esp, 8
                push    eax
                push    ecx
                call    edx
                add     esp, 10h

loc_742:                                ; CODE XREF: register_tm_clones+2C↑j
                                        ; register_tm_clones+36↑j
                mov     ebx, [ebp-4]
                leave
                retn
register_tm_clones endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

__do_global_dtors_aux proc near         ; DATA XREF: .fini_array:__do_global_dtors_aux_fini_array_entry↓o

var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    ebx
                call    __x86_get_pc_thunk_bx
                add     ebx, 1857h
                sub     esp, 4
                cmp     ds:(__bss_start - 1FB0h)[ebx], 0
                jnz     short loc_792
                mov     eax, ds:(__cxa_finalize_ptr - 1FB0h)[ebx]
                test    eax, eax
                jz      short loc_786
                sub     esp, 0Ch
                push    (__dso_handle - 1FB0h)[ebx]
                call    ___cxa_finalize
                add     esp, 10h

loc_786:                                ; CODE XREF: __do_global_dtors_aux+23↑j
                call    deregister_tm_clones
                mov     ds:(__bss_start - 1FB0h)[ebx], 1

loc_792:                                ; CODE XREF: __do_global_dtors_aux+19↑j
                mov     ebx, [ebp+var_4]
                leave
                retn
__do_global_dtors_aux endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

frame_dummy     proc near               ; CODE XREF: __libc_csu_init+44↓p
                                        ; DATA XREF: .init_array:__frame_dummy_init_array_entry↓o
                push    ebp
                mov     ebp, esp
                pop     ebp
                jmp     register_tm_clones
frame_dummy     endp


; =============== S U B R O U T I N E =======================================


                public __x86_get_pc_thunk_dx
__x86_get_pc_thunk_dx proc near         ; CODE XREF: deregister_tm_clones↑p
                                        ; register_tm_clones↑p
                mov     edx, [esp+0]
                retn
__x86_get_pc_thunk_dx endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; _DWORD randnum(void)
                public _Z7randnumv
_Z7randnumv     proc near               ; CODE XREF: main+48↓p

var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; __unwind {
                push    ebp
                mov     ebp, esp
                push    ebx
                sub     esp, 14h
                call    __x86_get_pc_thunk_bx
                add     ebx, 17F7h
                sub     esp, 0Ch
                push    0               ; timer
                call    _time
                add     esp, 10h
                sub     esp, 0Ch
                push    eax             ; seed
                call    _srand
                add     esp, 10h
                mov     [ebp+var_10], 0

loc_7DF:                                ; CODE XREF: randnum(void)+98↓j
                cmp     [ebp+var_10], 9
                jg      short loc_847
                call    _rand
                mov     ecx, eax
                mov     edx, 66666667h
                mov     eax, ecx
                imul    edx
                sar     edx, 2
                mov     eax, ecx
                sar     eax, 1Fh
                sub     edx, eax
                mov     eax, edx
                mov     [ebp+var_C], eax
                mov     edx, [ebp+var_C]
                mov     eax, edx
                shl     eax, 2
                add     eax, edx
                add     eax, eax
                sub     ecx, eax
                mov     eax, ecx
                mov     [ebp+var_C], eax
                sub     esp, 8
                push    [ebp+var_C]
                mov     eax, ds:(_ZSt4cout_ptr - 1FB0h)[ebx]
                push    eax
                call    __ZNSolsEi      ; std::ostream::operator<<(int)
                add     esp, 10h
                mov     edx, eax
                sub     esp, 8
                mov     eax, ds:(_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6__ptr - 1FB0h)[ebx]
                push    eax
                push    edx
                call    __ZNSolsEPFRSoS_E ; std::ostream::operator<<(std::ostream & (*)(std::ostream &))
                add     esp, 10h
                add     [ebp+var_10], 1
                jmp     short loc_7DF
; ---------------------------------------------------------------------------

loc_847:                                ; CODE XREF: randnum(void)+36↑j
                nop
                mov     ebx, [ebp+var_4]
                leave
                retn
; } // starts at 7AD
_Z7randnumv     endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame fuzzy-sp

; int __cdecl main(int argc, const char **argv, const char **envp)
                public main
main            proc near               ; DATA XREF: .got:main_ptr↓o

argc            = dword ptr  8
argv            = dword ptr  0Ch
envp            = dword ptr  10h

; __unwind {
                lea     ecx, [esp+4]
                and     esp, 0FFFFFFF0h
                push    dword ptr [ecx-4]
                push    ebp
                mov     ebp, esp
                push    ebx
                push    ecx
                call    __x86_get_pc_thunk_bx
                add     ebx, 174Fh
                sub     esp, 8
                lea     eax, (aTheTenRandomNu - 1FB0h)[ebx] ; "The ten random number are "
                push    eax
                mov     eax, ds:(_ZSt4cout_ptr - 1FB0h)[ebx]
                push    eax
                call    __ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc ; std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const*)
                add     esp, 10h
                mov     edx, eax
                sub     esp, 8
                mov     eax, ds:(_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6__ptr - 1FB0h)[ebx]
                push    eax
                push    edx
                call    __ZNSolsEPFRSoS_E ; std::ostream::operator<<(std::ostream & (*)(std::ostream &))
                add     esp, 10h
                call    _Z7randnumv     ; randnum(void)
                mov     eax, 0
                lea     esp, [ebp-8]
                pop     ecx
                pop     ebx
                pop     ebp
                lea     esp, [ecx-4]
                retn
; } // starts at 84D
main            endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; _DWORD __cdecl __static_initialization_and_destruction_0(int, int)
_Z41__static_initialization_and_destruction_0ii proc near
                                        ; CODE XREF: _GLOBAL__sub_I__Z7randnumv+1A↓p

var_4           = dword ptr -4
arg_0           = dword ptr  8
arg_4           = dword ptr  0Ch

; __unwind {
                push    ebp
                mov     ebp, esp
                push    ebx
                sub     esp, 4
                call    __x86_get_pc_thunk_bx
                add     ebx, 16FBh
                cmp     [ebp+arg_0], 1
                jnz     short loc_8FC
                cmp     [ebp+arg_4], 0FFFFh
                jnz     short loc_8FC
                sub     esp, 0Ch
                lea     eax, (_ZStL8__ioinit - 1FB0h)[ebx] ; std::__ioinit
                push    eax             ; this
                call    __ZNSt8ios_base4InitC1Ev ; std::ios_base::Init::Init(void)
                add     esp, 10h
                sub     esp, 4
                lea     eax, (__dso_handle - 1FB0h)[ebx]
                push    eax
                lea     eax, (_ZStL8__ioinit - 1FB0h)[ebx] ; std::__ioinit
                push    eax
                mov     eax, ds:(_ZNSt8ios_base4InitD1Ev_ptr - 1FB0h)[ebx]
                push    eax
                call    ___cxa_atexit
                add     esp, 10h

loc_8FC:                                ; CODE XREF: __static_initialization_and_destruction_0(int,int)+16↑j
                                        ; __static_initialization_and_destruction_0(int,int)+1F↑j
                nop
                mov     ebx, [ebp+var_4]
                leave
                retn
; } // starts at 8A9
_Z41__static_initialization_and_destruction_0ii endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

_GLOBAL__sub_I__Z7randnumv proc near    ; CODE XREF: __libc_csu_init+44↓p
                                        ; DATA XREF: .init_array:__frame_dummy_init_array_entry↓o
; __unwind {
                push    ebp
                mov     ebp, esp
                sub     esp, 8
                call    __x86_get_pc_thunk_ax
                add     eax, 16A3h
                sub     esp, 8
                push    0FFFFh          ; int
                push    1               ; int
                call    _Z41__static_initialization_and_destruction_0ii ; __static_initialization_and_destruction_0(int,int)
                add     esp, 10h
                leave
                retn
; } // starts at 902
_GLOBAL__sub_I__Z7randnumv endp


; =============== S U B R O U T I N E =======================================


                public __x86_get_pc_thunk_ax
__x86_get_pc_thunk_ax proc near         ; CODE XREF: _GLOBAL__sub_I__Z7randnumv+6↑p
; __unwind {
                mov     eax, [esp+0]
                retn
; } // starts at 926
__x86_get_pc_thunk_ax endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================


                public __libc_csu_init
__libc_csu_init proc near               ; DATA XREF: _start+1D↑o

arg_0           = dword ptr  4
arg_4           = dword ptr  8
arg_8           = dword ptr  0Ch

; __unwind {
                push    ebp
                push    edi
                push    esi
                push    ebx
                call    __x86_get_pc_thunk_bx
                add     ebx, 1677h
                sub     esp, 0Ch
                mov     ebp, [esp+1Ch+arg_8]
                lea     esi, (__do_global_dtors_aux_fini_array_entry - 1FB0h)[ebx]
                call    _init_proc
                lea     eax, (__frame_dummy_init_array_entry - 1FB0h)[ebx]
                sub     esi, eax
                sar     esi, 2
                test    esi, esi
                jz      short loc_985
                xor     edi, edi
                lea     esi, [esi+0]

loc_968:                                ; CODE XREF: __libc_csu_init+53↓j
                sub     esp, 4
                push    ebp
                push    [esp+24h+arg_4]
                push    [esp+28h+arg_0]
                call    ds:(__frame_dummy_init_array_entry - 1FB0h)[ebx+edi*4]
                add     edi, 1
                add     esp, 10h
                cmp     esi, edi
                jnz     short loc_968

loc_985:                                ; CODE XREF: __libc_csu_init+2E↑j
                add     esp, 0Ch
                pop     ebx
                pop     esi
                pop     edi
                pop     ebp
                retn
; } // starts at 930
__libc_csu_init endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================


                public __libc_csu_fini
__libc_csu_fini proc near               ; DATA XREF: _start+16↑o
; __unwind {
                rep retn
; } // starts at 990
__libc_csu_fini endp

_text           ends

; ===========================================================================

; Segment type: Pure code
; Segment permissions: Read/Execute
LOAD            segment mempage public 'CODE' use32
                assume cs:LOAD
                ;org 992h
                assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                align 4
LOAD            ends

; ===========================================================================

; Segment type: Pure code
; Segment permissions: Read/Execute
_fini           segment dword public 'CODE' use32
                assume cs:_fini
                ;org 994h
                assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B R O U T I N E =======================================


                public _term_proc
_term_proc      proc near
                push    ebx             ; _fini
                sub     esp, 8
                call    __x86_get_pc_thunk_bx
                add     ebx, 1613h
                add     esp, 8
                pop     ebx
                retn
_term_proc      endp

_fini           ends

; ===========================================================================

; Segment type: Pure data
; Segment permissions: Read
_rodata         segment dword public 'CONST' use32
                assume cs:_rodata
                ;org 9A8h
                public _fp_hw
_fp_hw          db    3
                db    0
                db    0
                db    0
                public _IO_stdin_used
_IO_stdin_used  db    1                 ; DATA XREF: LOAD:000002DC↑o
                db    0
                db    2
                db    0
; std::piecewise_construct
_ZStL19piecewise_construct db    0
aTheTenRandomNu db 'The ten random number are ',0
                                        ; DATA XREF: main+1D↑o
_rodata         ends

; ===========================================================================

; Segment type: Pure data
; Segment permissions: Read
_eh_frame_hdr   segment dword public 'CONST' use32
                assume cs:_eh_frame_hdr
                ;org 9CCh
__GNU_EH_FRAME_HDR db    1              ; DATA XREF: LOAD:000000FC↑o
                db  1Bh
                db    3
                db  3Bh ; ;
                db  50h ; P
                db    0
                db    0
                db    0
                db    9
                db    0
                db    0
                db    0
                db 0F4h
                db 0FBh
                db 0FFh
                db 0FFh
                db  6Ch ; l
                db    0
                db    0
                db    0
                db  94h
                db 0FCh
                db 0FFh
                db 0FFh
                db  90h
                db    0
                db    0
                db    0
                db 0E1h
                db 0FDh
                db 0FFh
                db 0FFh
                db 0A4h
                db    0
                db    0
                db    0
                db  81h
                db 0FEh
                db 0FFh
                db 0FFh
                db 0C8h
                db    0
                db    0
                db    0
                db 0DDh
                db 0FEh
                db 0FFh
                db 0FFh
                db 0FCh
                db    0
                db    0
                db    0
                db  36h ; 6
                db 0FFh
                db 0FFh
                db 0FFh
                db  20h
                db    1
                db    0
                db    0
                db  5Ah ; Z
                db 0FFh
                db 0FFh
                db 0FFh
                db  40h ; @
                db    1
                db    0
                db    0
                db  64h ; d
                db 0FFh
                db 0FFh
                db 0FFh
                db  54h ; T
                db    1
                db    0
                db    0
                db 0C4h
                db 0FFh
                db 0FFh
                db 0FFh
                db 0A0h
                db    1
                db    0
                db    0
_eh_frame_hdr   ends

; ===========================================================================

; Segment type: Pure data
; Segment permissions: Read
_eh_frame       segment dword public 'CONST' use32
                assume cs:_eh_frame
                ;org 0A20h
                db  14h
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    1
                db  7Ah ; z
                db  52h ; R
                db    0
                db    1
                db  7Ch ; |
                db    8
                db    1
                db  1Bh
                db  0Ch
                db    4
                db    4
                db  88h
                db    1
                db    0
                db    0
                db  20h
                db    0
                db    0
                db    0
                db  1Ch
                db    0
                db    0
                db    0
                db  80h
                db 0FBh
                db 0FFh
                db 0FFh
                db 0A0h
                db    0
                db    0
                db    0
                db    0
                db  0Eh
                db    8
                db  46h ; F
                db  0Eh
                db  0Ch
                db  4Ah ; J
                db  0Fh
                db  0Bh
                db  74h ; t
                db    4
                db  78h ; x
                db    0
                db  3Fh ; ?
                db  1Ah
                db  3Bh ; ;
                db  2Ah ; *
                db  32h ; 2
                db  24h ; $
                db  22h ; "
                db  10h
                db    0
                db    0
                db    0
                db  40h ; @
                db    0
                db    0
                db    0
                db 0FCh
                db 0FBh
                db 0FFh
                db 0FFh
                db  10h
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db  20h
                db    0
                db    0
                db    0
                db  54h ; T
                db    0
                db    0
                db    0
                db  35h ; 5
                db 0FDh
                db 0FFh
                db 0FFh
                db 0A0h
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db  44h ; D
                db  83h
                db    3
                db    2
                db  98h
                db 0C5h
                db 0C3h
                db  0Ch
                db    4
                db    4
                db    0
                db  30h ; 0
                db    0
                db    0
                db    0
                db  78h ; x
                db    0
                db    0
                db    0
                db 0B1h
                db 0FDh
                db 0FFh
                db 0FFh
                db  5Ch ; \
                db    0
                db    0
                db    0
                db    0
                db  44h ; D
                db  0Ch
                db    1
                db    0
                db  47h ; G
                db  10h
                db    5
                db    2
                db  75h ; u
                db    0
                db  44h ; D
                db  0Fh
                db    3
                db  75h ; u
                db  78h ; x
                db    6
                db  10h
                db    3
                db    2
                db  75h ; u
                db  7Ch ; |
                db    2
                db  47h ; G
                db 0C1h
                db  0Ch
                db    1
                db    0
                db  41h ; A
                db 0C3h
                db  41h ; A
                db 0C5h
                db  43h ; C
                db  0Ch
                db    4
                db    4
                db  20h
                db    0
                db    0
                db    0
                db 0ACh
                db    0
                db    0
                db    0
                db 0D9h
                db 0FDh
                db 0FFh
                db 0FFh
                db  59h ; Y
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db  44h ; D
                db  83h
                db    3
                db    2
                db  51h ; Q
                db 0C5h
                db 0C3h
                db  0Ch
                db    4
                db    4
                db    0
                db  1Ch
                db    0
                db    0
                db    0
                db 0D0h
                db    0
                db    0
                db    0
                db  0Eh
                db 0FEh
                db 0FFh
                db 0FFh
                db  24h ; $
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db  60h ; `
                db 0C5h
                db  0Ch
                db    4
                db    4
                db    0
                db    0
                db  10h
                db    0
                db    0
                db    0
                db 0F0h
                db    0
                db    0
                db    0
                db  12h
                db 0FEh
                db 0FFh
                db 0FFh
                db    4
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db  48h ; H
                db    0
                db    0
                db    0
                db    4
                db    1
                db    0
                db    0
                db    8
                db 0FEh
                db 0FFh
                db 0FFh
                db  5Dh ; ]
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h
                db    2
                db  41h ; A
                db  0Eh
                db  0Ch
                db  87h
                db    3
                db  41h ; A
                db  0Eh
                db  10h
                db  86h
                db    4
                db  41h ; A
                db  0Eh
                db  14h
                db  83h
                db    5
                db  4Eh ; N
                db  0Eh
                db  20h
                db  69h ; i
                db  0Eh
                db  24h ; $
                db  41h ; A
                db  0Eh
                db  28h ; (
                db  44h ; D
                db  0Eh
                db  2Ch ; ,
                db  44h ; D
                db  0Eh
                db  30h ; 0
                db  4Dh ; M
                db  0Eh
                db  20h
                db  47h ; G
                db  0Eh
                db  14h
                db  41h ; A
                db 0C3h
                db  0Eh
                db  10h
                db  41h ; A
                db 0C6h
                db  0Eh
                db  0Ch
                db  41h ; A
                db 0C7h
                db  0Eh
                db    8
                db  41h ; A
                db 0C5h
                db  0Eh
                db    4
                db    0
                db    0
                db  10h
                db    0
                db    0
                db    0
                db  50h ; P
                db    1
                db    0
                db    0
                db  1Ch
                db 0FEh
                db 0FFh
                db 0FFh
                db    2
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
__FRAME_END__   db    0
                db    0
                db    0
                db    0
_eh_frame       ends

; ELF Initialization Function Table
; ===========================================================================

; Segment type: Pure data
; Segment permissions: Read/Write
_init_array     segment dword public 'DATA' use32
                assume cs:_init_array
                ;org 1EA4h
__frame_dummy_init_array_entry dd offset frame_dummy
                                        ; DATA XREF: LOAD:0000009C↑o
                                        ; LOAD:0000013C↑o ...
                dd offset _GLOBAL__sub_I__Z7randnumv ; Alternative name is '__init_array_start'
_init_array     ends

; ELF Termination Function Table
; ===========================================================================

; Segment type: Pure data
; Segment permissions: Read/Write
_fini_array     segment dword public 'DATA' use32
                assume cs:_fini_array
                ;org 1EACh
__do_global_dtors_aux_fini_array_entry dd offset __do_global_dtors_aux
                                        ; DATA XREF: __libc_csu_init+16↑o
_fini_array     ends                    ; Alternative name is '__init_array_end'

; ELF Dynamic Information
; ===========================================================================

; Segment type: Pure data
; Segment permissions: Read/Write
LOAD            segment mempage public 'DATA' use32
                assume cs:LOAD
                ;org 1EB0h
_DYNAMIC        Elf32_Dyn <1, <1>>      ; DATA XREF: LOAD:000000BC↑o
                                        ; .got:_GLOBAL_OFFSET_TABLE_↓o
                                        ; DT_NEEDED libstdc++.so.6
                Elf32_Dyn <1, <11Dh>>   ; DT_NEEDED libc.so.6
                Elf32_Dyn <0Ch, <59Ch>> ; DT_INIT
                Elf32_Dyn <0Dh, <994h>> ; DT_FINI
                Elf32_Dyn <19h, <1EA4h>> ; DT_INIT_ARRAY
                Elf32_Dyn <1Bh, <8>>    ; DT_INIT_ARRAYSZ
                Elf32_Dyn <1Ah, <1EACh>> ; DT_FINI_ARRAY
                Elf32_Dyn <1Ch, <4>>    ; DT_FINI_ARRAYSZ
                Elf32_Dyn <6FFFFEF5h, <1ACh>> ; DT_GNU_HASH
                Elf32_Dyn <5, <2ECh>>   ; DT_STRTAB
                Elf32_Dyn <6, <1CCh>>   ; DT_SYMTAB
                Elf32_Dyn <0Ah, <191h>> ; DT_STRSZ
                Elf32_Dyn <0Bh, <10h>>  ; DT_SYMENT
                Elf32_Dyn <15h, <0>>    ; DT_DEBUG
                Elf32_Dyn <3, <1FB0h>>  ; DT_PLTGOT
                Elf32_Dyn <2, <48h>>    ; DT_PLTRELSZ
                Elf32_Dyn <14h, <11h>>  ; DT_PLTREL
                Elf32_Dyn <17h, <554h>> ; DT_JMPREL
                Elf32_Dyn <11h, <4F4h>> ; DT_REL
                Elf32_Dyn <12h, <60h>>  ; DT_RELSZ
                Elf32_Dyn <13h, <8>>    ; DT_RELENT
                Elf32_Dyn <1Eh, <8>>    ; DT_FLAGS
                Elf32_Dyn <6FFFFFFBh, <8000001h>> ; DT_FLAGS_1
                Elf32_Dyn <6FFFFFFEh, <4A4h>> ; DT_VERNEED
                Elf32_Dyn <6FFFFFFFh, <2>> ; DT_VERNEEDNUM
                Elf32_Dyn <6FFFFFF0h, <47Eh>> ; DT_VERSYM
                Elf32_Dyn <6FFFFFFAh, <5>> ; DT_RELCOUNT
                Elf32_Dyn <0>           ; DT_NULL
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
LOAD            ends

; ===========================================================================

; Segment type: Pure data
; Segment permissions: Read/Write
_got            segment dword public 'DATA' use32
                assume cs:_got
                ;org 1FB0h
_GLOBAL_OFFSET_TABLE_ dd offset _DYNAMIC
                dd 0
                dd 0
__cxa_atexit_ptr dd offset __cxa_atexit ; DATA XREF: ___cxa_atexit↑r
time_ptr        dd offset time          ; DATA XREF: _time↑r
srand_ptr       dd offset srand         ; DATA XREF: _srand↑r
__libc_start_main_ptr dd offset __libc_start_main
                                        ; DATA XREF: ___libc_start_main↑r
_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc_ptr dd offset _ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc
                                        ; DATA XREF: std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const*)↑r
                                        ; std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const*)
_ZNSolsEPFRSoS_E_ptr dd offset _ZNSolsEPFRSoS_E
                                        ; DATA XREF: std::ostream::operator<<(std::ostream & (*)(std::ostream &))↑r
                                        ; std::ostream::operator<<(std::ostream & (*)(std::ostream &))
rand_ptr        dd offset rand          ; DATA XREF: _rand↑r
_ZNSt8ios_base4InitC1Ev_ptr dd offset _ZNSt8ios_base4InitC1Ev
                                        ; DATA XREF: std::ios_base::Init::Init(void)↑r
                                        ; std::ios_base::Init::Init(void)
_ZNSolsEi_ptr   dd offset _ZNSolsEi     ; DATA XREF: std::ostream::operator<<(int)↑r
                                        ; std::ostream::operator<<(int)
__cxa_finalize_ptr dd offset __cxa_finalize
                                        ; DATA XREF: ___cxa_finalize↑r
                                        ; __do_global_dtors_aux+1B↑r
main_ptr        dd offset main          ; DATA XREF: _start+26↑r
_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6__ptr dd offset _ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
                                        ; DATA XREF: randnum(void)+84↑r
                                        ; main+38↑r
                                        ; std::endl<char,std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &)
_ZSt4cout_ptr   dd offset _ZSt4cout     ; DATA XREF: randnum(void)+70↑r
                                        ; main+24↑r
                                        ; std::cout
_ITM_deregisterTMCloneTable_ptr dd offset _ITM_deregisterTMCloneTable
                                        ; DATA XREF: deregister_tm_clones+1B↑r
__gmon_start___ptr dd offset __gmon_start__
                                        ; DATA XREF: _init_proc+F↑r
_ITM_registerTMCloneTable_ptr dd offset _ITM_registerTMCloneTable
                                        ; DATA XREF: register_tm_clones+2E↑r
_ZNSt8ios_base4InitD1Ev_ptr dd offset _ZNSt8ios_base4InitD1Ev
                                        ; DATA XREF: __static_initialization_and_destruction_0(int,int)+44↑r
                                        ; ___gmon_start__↑r
_got            ends                    ; std::ios_base::Init::~Init()

; ===========================================================================

; Segment type: Pure data
; Segment permissions: Read/Write
_data           segment dword public 'DATA' use32
                assume cs:_data
                ;org 2000h
                public __data_start ; weak
__data_start    db    0                 ; Alternative name is '__data_start'
                                        ; data_start
                db    0
                db    0
                db    0
                public __dso_handle
__dso_handle    dd offset __dso_handle  ; DATA XREF: __do_global_dtors_aux+28↑r
                                        ; __static_initialization_and_destruction_0(int,int)+36↑o ...
_data           ends

; ===========================================================================

; Segment type: Uninitialized
; Segment permissions: Read/Write
_bss            segment byte public 'BSS' use32
                assume cs:_bss
                ;org 2008h
                assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                public __bss_start
__bss_start     db ?                    ; DATA XREF: deregister_tm_clones+B↑o
                                        ; deregister_tm_clones+11↑o ...
                                        ; Alternative name is '__TMC_END__'
                                        ; completed.7281
                                        ; _edata
; std::__ioinit
_ZStL8__ioinit  db    ? ;               ; DATA XREF: __static_initialization_and_destruction_0(int,int)+24↑o
                                        ; __static_initialization_and_destruction_0(int,int)+3D↑o
                db    ? ;
                db    ? ;
_bss            ends

; ===========================================================================

; Segment type: Zero-length
_prgend         segment byte public '' use32
_end            label byte
_prgend         ends

; ===========================================================================

; Segment type: Externs
; extern
                extrn __cxa_finalize:near ; weak
                                        ; CODE XREF: ___cxa_finalize↑j
                                        ; DATA XREF: .got:__cxa_finalize_ptr↑o
; std::basic_ostream<char, std::char_traits<char>> & std::endl<char, std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &)
                extrn _ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_:near
                                        ; DATA XREF: .got:_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6__ptr↑o
                extrn __cxa_atexit:near ; CODE XREF: ___cxa_atexit↑j
                                        ; DATA XREF: .got:__cxa_atexit_ptr↑o
; time_t time(time_t *timer)
                extrn time:near         ; CODE XREF: _time↑j
                                        ; DATA XREF: .got:time_ptr↑o
; void srand(unsigned int seed)
                extrn srand:near        ; CODE XREF: _srand↑j
                                        ; DATA XREF: .got:srand_ptr↑o
; int __cdecl _libc_start_main(int (__cdecl *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)
                extrn __libc_start_main:near
                                        ; CODE XREF: ___libc_start_main↑j
                                        ; DATA XREF: .got:__libc_start_main_ptr↑o
; std::basic_ostream<char, std::char_traits<char>> & std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, char const*)
                extrn _ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc:near
                                        ; CODE XREF: std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const*)↑j
                                        ; DATA XREF: .got:_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc_ptr↑o
; std::ostream::operator<<(std::ostream & (*)(std::ostream &))
                extrn _ZNSolsEPFRSoS_E:near
                                        ; CODE XREF: std::ostream::operator<<(std::ostream & (*)(std::ostream &))↑j
                                        ; DATA XREF: .got:_ZNSolsEPFRSoS_E_ptr↑o
; int rand(void)
                extrn rand:near         ; CODE XREF: _rand↑j
                                        ; DATA XREF: .got:rand_ptr↑o
; std::cout
                extrn _ZSt4cout         ; DATA XREF: .got:_ZSt4cout_ptr↑o
; _DWORD std::ios_base::Init::Init(std::ios_base::Init *__hidden this)
                extrn _ZNSt8ios_base4InitC1Ev:near
                                        ; CODE XREF: std::ios_base::Init::Init(void)↑j
                                        ; DATA XREF: .got:_ZNSt8ios_base4InitC1Ev_ptr↑o
; std::ostream::operator<<(int)
                extrn _ZNSolsEi:near    ; CODE XREF: std::ostream::operator<<(int)↑j
                                        ; DATA XREF: .got:_ZNSolsEi_ptr↑o
; _DWORD __cdecl std::ios_base::Init::~Init(std::ios_base::Init *__hidden this)
                extrn _ZNSt8ios_base4InitD1Ev:near
                                        ; DATA XREF: .got:_ZNSt8ios_base4InitD1Ev_ptr↑o
                extrn _ITM_deregisterTMCloneTable ; weak
                                        ; DATA XREF: .got:_ITM_deregisterTMCloneTable_ptr↑o
                extrn __gmon_start__ ; weak
                                        ; DATA XREF: .got:__gmon_start___ptr↑o
                extrn _ITM_registerTMCloneTable ; weak
                                        ; DATA XREF: .got:_ITM_registerTMCloneTable_ptr↑o


                end _start
